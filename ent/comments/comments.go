// Code generated by ent, DO NOT EDIT.

package comments

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the comments type in the database.
	Label = "comments"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeVideoId holds the string denoting the videoid edge name in mutations.
	EdgeVideoId = "videoId"
	// EdgeUserId holds the string denoting the userid edge name in mutations.
	EdgeUserId = "userId"
	// Table holds the table name of the comments in the database.
	Table = "comments"
	// VideoIdTable is the table that holds the videoId relation/edge. The primary key declared below.
	VideoIdTable = "videos_commentId"
	// VideoIdInverseTable is the table name for the Videos entity.
	// It exists in this package in order to avoid circular dependency with the "videos" package.
	VideoIdInverseTable = "videos"
	// UserIdTable is the table that holds the userId relation/edge. The primary key declared below.
	UserIdTable = "user_sec_commentId"
	// UserIdInverseTable is the table name for the UserSec entity.
	// It exists in this package in order to avoid circular dependency with the "usersec" package.
	UserIdInverseTable = "user_secs"
)

// Columns holds all SQL columns for comments fields.
var Columns = []string{
	FieldID,
}

var (
	// VideoIdPrimaryKey and VideoIdColumn2 are the table columns denoting the
	// primary key for the videoId relation (M2M).
	VideoIdPrimaryKey = []string{"videos_id", "comments_id"}
	// UserIdPrimaryKey and UserIdColumn2 are the table columns denoting the
	// primary key for the userId relation (M2M).
	UserIdPrimaryKey = []string{"user_sec_id", "comments_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Comments queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByVideoIdCount orders the results by videoId count.
func ByVideoIdCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVideoIdStep(), opts...)
	}
}

// ByVideoId orders the results by videoId terms.
func ByVideoId(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVideoIdStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserIdCount orders the results by userId count.
func ByUserIdCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserIdStep(), opts...)
	}
}

// ByUserId orders the results by userId terms.
func ByUserId(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserIdStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newVideoIdStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VideoIdInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, VideoIdTable, VideoIdPrimaryKey...),
	)
}
func newUserIdStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserIdInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, UserIdTable, UserIdPrimaryKey...),
	)
}
