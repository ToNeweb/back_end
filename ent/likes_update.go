// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server04/ent/likes"
	"server04/ent/predicate"
	"server04/ent/usersec"
	"server04/ent/videos"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LikesUpdate is the builder for updating Likes entities.
type LikesUpdate struct {
	config
	hooks    []Hook
	mutation *LikesMutation
}

// Where appends a list predicates to the LikesUpdate builder.
func (lu *LikesUpdate) Where(ps ...predicate.Likes) *LikesUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// AddVideoIDs adds the "videos" edge to the Videos entity by IDs.
func (lu *LikesUpdate) AddVideoIDs(ids ...int) *LikesUpdate {
	lu.mutation.AddVideoIDs(ids...)
	return lu
}

// AddVideos adds the "videos" edges to the Videos entity.
func (lu *LikesUpdate) AddVideos(v ...*Videos) *LikesUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return lu.AddVideoIDs(ids...)
}

// AddUserIDs adds the "user" edge to the UserSec entity by IDs.
func (lu *LikesUpdate) AddUserIDs(ids ...int) *LikesUpdate {
	lu.mutation.AddUserIDs(ids...)
	return lu
}

// AddUser adds the "user" edges to the UserSec entity.
func (lu *LikesUpdate) AddUser(u ...*UserSec) *LikesUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return lu.AddUserIDs(ids...)
}

// Mutation returns the LikesMutation object of the builder.
func (lu *LikesUpdate) Mutation() *LikesMutation {
	return lu.mutation
}

// ClearVideos clears all "videos" edges to the Videos entity.
func (lu *LikesUpdate) ClearVideos() *LikesUpdate {
	lu.mutation.ClearVideos()
	return lu
}

// RemoveVideoIDs removes the "videos" edge to Videos entities by IDs.
func (lu *LikesUpdate) RemoveVideoIDs(ids ...int) *LikesUpdate {
	lu.mutation.RemoveVideoIDs(ids...)
	return lu
}

// RemoveVideos removes "videos" edges to Videos entities.
func (lu *LikesUpdate) RemoveVideos(v ...*Videos) *LikesUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return lu.RemoveVideoIDs(ids...)
}

// ClearUser clears all "user" edges to the UserSec entity.
func (lu *LikesUpdate) ClearUser() *LikesUpdate {
	lu.mutation.ClearUser()
	return lu
}

// RemoveUserIDs removes the "user" edge to UserSec entities by IDs.
func (lu *LikesUpdate) RemoveUserIDs(ids ...int) *LikesUpdate {
	lu.mutation.RemoveUserIDs(ids...)
	return lu
}

// RemoveUser removes "user" edges to UserSec entities.
func (lu *LikesUpdate) RemoveUser(u ...*UserSec) *LikesUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return lu.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LikesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LikesUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LikesUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LikesUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lu *LikesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(likes.Table, likes.Columns, sqlgraph.NewFieldSpec(likes.FieldID, field.TypeInt))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if lu.mutation.VideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   likes.VideosTable,
			Columns: likes.VideosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videos.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedVideosIDs(); len(nodes) > 0 && !lu.mutation.VideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   likes.VideosTable,
			Columns: likes.VideosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videos.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.VideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   likes.VideosTable,
			Columns: likes.VideosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videos.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   likes.UserTable,
			Columns: likes.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersec.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedUserIDs(); len(nodes) > 0 && !lu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   likes.UserTable,
			Columns: likes.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersec.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   likes.UserTable,
			Columns: likes.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersec.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{likes.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LikesUpdateOne is the builder for updating a single Likes entity.
type LikesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LikesMutation
}

// AddVideoIDs adds the "videos" edge to the Videos entity by IDs.
func (luo *LikesUpdateOne) AddVideoIDs(ids ...int) *LikesUpdateOne {
	luo.mutation.AddVideoIDs(ids...)
	return luo
}

// AddVideos adds the "videos" edges to the Videos entity.
func (luo *LikesUpdateOne) AddVideos(v ...*Videos) *LikesUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return luo.AddVideoIDs(ids...)
}

// AddUserIDs adds the "user" edge to the UserSec entity by IDs.
func (luo *LikesUpdateOne) AddUserIDs(ids ...int) *LikesUpdateOne {
	luo.mutation.AddUserIDs(ids...)
	return luo
}

// AddUser adds the "user" edges to the UserSec entity.
func (luo *LikesUpdateOne) AddUser(u ...*UserSec) *LikesUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return luo.AddUserIDs(ids...)
}

// Mutation returns the LikesMutation object of the builder.
func (luo *LikesUpdateOne) Mutation() *LikesMutation {
	return luo.mutation
}

// ClearVideos clears all "videos" edges to the Videos entity.
func (luo *LikesUpdateOne) ClearVideos() *LikesUpdateOne {
	luo.mutation.ClearVideos()
	return luo
}

// RemoveVideoIDs removes the "videos" edge to Videos entities by IDs.
func (luo *LikesUpdateOne) RemoveVideoIDs(ids ...int) *LikesUpdateOne {
	luo.mutation.RemoveVideoIDs(ids...)
	return luo
}

// RemoveVideos removes "videos" edges to Videos entities.
func (luo *LikesUpdateOne) RemoveVideos(v ...*Videos) *LikesUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return luo.RemoveVideoIDs(ids...)
}

// ClearUser clears all "user" edges to the UserSec entity.
func (luo *LikesUpdateOne) ClearUser() *LikesUpdateOne {
	luo.mutation.ClearUser()
	return luo
}

// RemoveUserIDs removes the "user" edge to UserSec entities by IDs.
func (luo *LikesUpdateOne) RemoveUserIDs(ids ...int) *LikesUpdateOne {
	luo.mutation.RemoveUserIDs(ids...)
	return luo
}

// RemoveUser removes "user" edges to UserSec entities.
func (luo *LikesUpdateOne) RemoveUser(u ...*UserSec) *LikesUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return luo.RemoveUserIDs(ids...)
}

// Where appends a list predicates to the LikesUpdate builder.
func (luo *LikesUpdateOne) Where(ps ...predicate.Likes) *LikesUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LikesUpdateOne) Select(field string, fields ...string) *LikesUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Likes entity.
func (luo *LikesUpdateOne) Save(ctx context.Context) (*Likes, error) {
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LikesUpdateOne) SaveX(ctx context.Context) *Likes {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LikesUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LikesUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (luo *LikesUpdateOne) sqlSave(ctx context.Context) (_node *Likes, err error) {
	_spec := sqlgraph.NewUpdateSpec(likes.Table, likes.Columns, sqlgraph.NewFieldSpec(likes.FieldID, field.TypeInt))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Likes.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, likes.FieldID)
		for _, f := range fields {
			if !likes.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != likes.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if luo.mutation.VideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   likes.VideosTable,
			Columns: likes.VideosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videos.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedVideosIDs(); len(nodes) > 0 && !luo.mutation.VideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   likes.VideosTable,
			Columns: likes.VideosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videos.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.VideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   likes.VideosTable,
			Columns: likes.VideosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videos.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   likes.UserTable,
			Columns: likes.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersec.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedUserIDs(); len(nodes) > 0 && !luo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   likes.UserTable,
			Columns: likes.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersec.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   likes.UserTable,
			Columns: likes.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersec.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Likes{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{likes.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
