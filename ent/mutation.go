// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server04/ent/comments"
	"server04/ent/likes"
	"server04/ent/predicate"
	"server04/ent/userprofile"
	"server04/ent/usersec"
	"server04/ent/videos"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeComments    = "Comments"
	TypeLikes       = "Likes"
	TypeUserProfile = "UserProfile"
	TypeUserSec     = "UserSec"
	TypeVideos      = "Videos"
)

// CommentsMutation represents an operation that mutates the Comments nodes in the graph.
type CommentsMutation struct {
	config
	op             Op
	typ            string
	id             *int
	commentStr     *string
	clearedFields  map[string]struct{}
	videoId        map[int]struct{}
	removedvideoId map[int]struct{}
	clearedvideoId bool
	userId         map[int]struct{}
	removeduserId  map[int]struct{}
	cleareduserId  bool
	done           bool
	oldValue       func(context.Context) (*Comments, error)
	predicates     []predicate.Comments
}

var _ ent.Mutation = (*CommentsMutation)(nil)

// commentsOption allows management of the mutation configuration using functional options.
type commentsOption func(*CommentsMutation)

// newCommentsMutation creates new mutation for the Comments entity.
func newCommentsMutation(c config, op Op, opts ...commentsOption) *CommentsMutation {
	m := &CommentsMutation{
		config:        c,
		op:            op,
		typ:           TypeComments,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCommentsID sets the ID field of the mutation.
func withCommentsID(id int) commentsOption {
	return func(m *CommentsMutation) {
		var (
			err   error
			once  sync.Once
			value *Comments
		)
		m.oldValue = func(ctx context.Context) (*Comments, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Comments.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withComments sets the old Comments of the mutation.
func withComments(node *Comments) commentsOption {
	return func(m *CommentsMutation) {
		m.oldValue = func(context.Context) (*Comments, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CommentsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CommentsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CommentsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CommentsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Comments.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCommentStr sets the "commentStr" field.
func (m *CommentsMutation) SetCommentStr(s string) {
	m.commentStr = &s
}

// CommentStr returns the value of the "commentStr" field in the mutation.
func (m *CommentsMutation) CommentStr() (r string, exists bool) {
	v := m.commentStr
	if v == nil {
		return
	}
	return *v, true
}

// OldCommentStr returns the old "commentStr" field's value of the Comments entity.
// If the Comments object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentsMutation) OldCommentStr(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCommentStr is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCommentStr requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCommentStr: %w", err)
	}
	return oldValue.CommentStr, nil
}

// ResetCommentStr resets all changes to the "commentStr" field.
func (m *CommentsMutation) ResetCommentStr() {
	m.commentStr = nil
}

// AddVideoIdIDs adds the "videoId" edge to the Videos entity by ids.
func (m *CommentsMutation) AddVideoIdIDs(ids ...int) {
	if m.videoId == nil {
		m.videoId = make(map[int]struct{})
	}
	for i := range ids {
		m.videoId[ids[i]] = struct{}{}
	}
}

// ClearVideoId clears the "videoId" edge to the Videos entity.
func (m *CommentsMutation) ClearVideoId() {
	m.clearedvideoId = true
}

// VideoIdCleared reports if the "videoId" edge to the Videos entity was cleared.
func (m *CommentsMutation) VideoIdCleared() bool {
	return m.clearedvideoId
}

// RemoveVideoIdIDs removes the "videoId" edge to the Videos entity by IDs.
func (m *CommentsMutation) RemoveVideoIdIDs(ids ...int) {
	if m.removedvideoId == nil {
		m.removedvideoId = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.videoId, ids[i])
		m.removedvideoId[ids[i]] = struct{}{}
	}
}

// RemovedVideoId returns the removed IDs of the "videoId" edge to the Videos entity.
func (m *CommentsMutation) RemovedVideoIdIDs() (ids []int) {
	for id := range m.removedvideoId {
		ids = append(ids, id)
	}
	return
}

// VideoIdIDs returns the "videoId" edge IDs in the mutation.
func (m *CommentsMutation) VideoIdIDs() (ids []int) {
	for id := range m.videoId {
		ids = append(ids, id)
	}
	return
}

// ResetVideoId resets all changes to the "videoId" edge.
func (m *CommentsMutation) ResetVideoId() {
	m.videoId = nil
	m.clearedvideoId = false
	m.removedvideoId = nil
}

// AddUserIdIDs adds the "userId" edge to the UserSec entity by ids.
func (m *CommentsMutation) AddUserIdIDs(ids ...int) {
	if m.userId == nil {
		m.userId = make(map[int]struct{})
	}
	for i := range ids {
		m.userId[ids[i]] = struct{}{}
	}
}

// ClearUserId clears the "userId" edge to the UserSec entity.
func (m *CommentsMutation) ClearUserId() {
	m.cleareduserId = true
}

// UserIdCleared reports if the "userId" edge to the UserSec entity was cleared.
func (m *CommentsMutation) UserIdCleared() bool {
	return m.cleareduserId
}

// RemoveUserIdIDs removes the "userId" edge to the UserSec entity by IDs.
func (m *CommentsMutation) RemoveUserIdIDs(ids ...int) {
	if m.removeduserId == nil {
		m.removeduserId = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.userId, ids[i])
		m.removeduserId[ids[i]] = struct{}{}
	}
}

// RemovedUserId returns the removed IDs of the "userId" edge to the UserSec entity.
func (m *CommentsMutation) RemovedUserIdIDs() (ids []int) {
	for id := range m.removeduserId {
		ids = append(ids, id)
	}
	return
}

// UserIdIDs returns the "userId" edge IDs in the mutation.
func (m *CommentsMutation) UserIdIDs() (ids []int) {
	for id := range m.userId {
		ids = append(ids, id)
	}
	return
}

// ResetUserId resets all changes to the "userId" edge.
func (m *CommentsMutation) ResetUserId() {
	m.userId = nil
	m.cleareduserId = false
	m.removeduserId = nil
}

// Where appends a list predicates to the CommentsMutation builder.
func (m *CommentsMutation) Where(ps ...predicate.Comments) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CommentsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CommentsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Comments, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CommentsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CommentsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Comments).
func (m *CommentsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CommentsMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.commentStr != nil {
		fields = append(fields, comments.FieldCommentStr)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CommentsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case comments.FieldCommentStr:
		return m.CommentStr()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CommentsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case comments.FieldCommentStr:
		return m.OldCommentStr(ctx)
	}
	return nil, fmt.Errorf("unknown Comments field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommentsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case comments.FieldCommentStr:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCommentStr(v)
		return nil
	}
	return fmt.Errorf("unknown Comments field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CommentsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CommentsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommentsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Comments numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CommentsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CommentsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CommentsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Comments nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CommentsMutation) ResetField(name string) error {
	switch name {
	case comments.FieldCommentStr:
		m.ResetCommentStr()
		return nil
	}
	return fmt.Errorf("unknown Comments field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CommentsMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.videoId != nil {
		edges = append(edges, comments.EdgeVideoId)
	}
	if m.userId != nil {
		edges = append(edges, comments.EdgeUserId)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CommentsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case comments.EdgeVideoId:
		ids := make([]ent.Value, 0, len(m.videoId))
		for id := range m.videoId {
			ids = append(ids, id)
		}
		return ids
	case comments.EdgeUserId:
		ids := make([]ent.Value, 0, len(m.userId))
		for id := range m.userId {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CommentsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedvideoId != nil {
		edges = append(edges, comments.EdgeVideoId)
	}
	if m.removeduserId != nil {
		edges = append(edges, comments.EdgeUserId)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CommentsMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case comments.EdgeVideoId:
		ids := make([]ent.Value, 0, len(m.removedvideoId))
		for id := range m.removedvideoId {
			ids = append(ids, id)
		}
		return ids
	case comments.EdgeUserId:
		ids := make([]ent.Value, 0, len(m.removeduserId))
		for id := range m.removeduserId {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CommentsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedvideoId {
		edges = append(edges, comments.EdgeVideoId)
	}
	if m.cleareduserId {
		edges = append(edges, comments.EdgeUserId)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CommentsMutation) EdgeCleared(name string) bool {
	switch name {
	case comments.EdgeVideoId:
		return m.clearedvideoId
	case comments.EdgeUserId:
		return m.cleareduserId
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CommentsMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Comments unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CommentsMutation) ResetEdge(name string) error {
	switch name {
	case comments.EdgeVideoId:
		m.ResetVideoId()
		return nil
	case comments.EdgeUserId:
		m.ResetUserId()
		return nil
	}
	return fmt.Errorf("unknown Comments edge %s", name)
}

// LikesMutation represents an operation that mutates the Likes nodes in the graph.
type LikesMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	videos        map[int]struct{}
	removedvideos map[int]struct{}
	clearedvideos bool
	user          map[int]struct{}
	removeduser   map[int]struct{}
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Likes, error)
	predicates    []predicate.Likes
}

var _ ent.Mutation = (*LikesMutation)(nil)

// likesOption allows management of the mutation configuration using functional options.
type likesOption func(*LikesMutation)

// newLikesMutation creates new mutation for the Likes entity.
func newLikesMutation(c config, op Op, opts ...likesOption) *LikesMutation {
	m := &LikesMutation{
		config:        c,
		op:            op,
		typ:           TypeLikes,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLikesID sets the ID field of the mutation.
func withLikesID(id int) likesOption {
	return func(m *LikesMutation) {
		var (
			err   error
			once  sync.Once
			value *Likes
		)
		m.oldValue = func(ctx context.Context) (*Likes, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Likes.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLikes sets the old Likes of the mutation.
func withLikes(node *Likes) likesOption {
	return func(m *LikesMutation) {
		m.oldValue = func(context.Context) (*Likes, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LikesMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LikesMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LikesMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LikesMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Likes.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// AddVideoIDs adds the "videos" edge to the Videos entity by ids.
func (m *LikesMutation) AddVideoIDs(ids ...int) {
	if m.videos == nil {
		m.videos = make(map[int]struct{})
	}
	for i := range ids {
		m.videos[ids[i]] = struct{}{}
	}
}

// ClearVideos clears the "videos" edge to the Videos entity.
func (m *LikesMutation) ClearVideos() {
	m.clearedvideos = true
}

// VideosCleared reports if the "videos" edge to the Videos entity was cleared.
func (m *LikesMutation) VideosCleared() bool {
	return m.clearedvideos
}

// RemoveVideoIDs removes the "videos" edge to the Videos entity by IDs.
func (m *LikesMutation) RemoveVideoIDs(ids ...int) {
	if m.removedvideos == nil {
		m.removedvideos = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.videos, ids[i])
		m.removedvideos[ids[i]] = struct{}{}
	}
}

// RemovedVideos returns the removed IDs of the "videos" edge to the Videos entity.
func (m *LikesMutation) RemovedVideosIDs() (ids []int) {
	for id := range m.removedvideos {
		ids = append(ids, id)
	}
	return
}

// VideosIDs returns the "videos" edge IDs in the mutation.
func (m *LikesMutation) VideosIDs() (ids []int) {
	for id := range m.videos {
		ids = append(ids, id)
	}
	return
}

// ResetVideos resets all changes to the "videos" edge.
func (m *LikesMutation) ResetVideos() {
	m.videos = nil
	m.clearedvideos = false
	m.removedvideos = nil
}

// AddUserIDs adds the "user" edge to the UserSec entity by ids.
func (m *LikesMutation) AddUserIDs(ids ...int) {
	if m.user == nil {
		m.user = make(map[int]struct{})
	}
	for i := range ids {
		m.user[ids[i]] = struct{}{}
	}
}

// ClearUser clears the "user" edge to the UserSec entity.
func (m *LikesMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the UserSec entity was cleared.
func (m *LikesMutation) UserCleared() bool {
	return m.cleareduser
}

// RemoveUserIDs removes the "user" edge to the UserSec entity by IDs.
func (m *LikesMutation) RemoveUserIDs(ids ...int) {
	if m.removeduser == nil {
		m.removeduser = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.user, ids[i])
		m.removeduser[ids[i]] = struct{}{}
	}
}

// RemovedUser returns the removed IDs of the "user" edge to the UserSec entity.
func (m *LikesMutation) RemovedUserIDs() (ids []int) {
	for id := range m.removeduser {
		ids = append(ids, id)
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
func (m *LikesMutation) UserIDs() (ids []int) {
	for id := range m.user {
		ids = append(ids, id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *LikesMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
	m.removeduser = nil
}

// Where appends a list predicates to the LikesMutation builder.
func (m *LikesMutation) Where(ps ...predicate.Likes) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LikesMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LikesMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Likes, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LikesMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LikesMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Likes).
func (m *LikesMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LikesMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LikesMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LikesMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Likes field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LikesMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Likes field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LikesMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LikesMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LikesMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Likes numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LikesMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LikesMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LikesMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Likes nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LikesMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Likes field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LikesMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.videos != nil {
		edges = append(edges, likes.EdgeVideos)
	}
	if m.user != nil {
		edges = append(edges, likes.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LikesMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case likes.EdgeVideos:
		ids := make([]ent.Value, 0, len(m.videos))
		for id := range m.videos {
			ids = append(ids, id)
		}
		return ids
	case likes.EdgeUser:
		ids := make([]ent.Value, 0, len(m.user))
		for id := range m.user {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LikesMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedvideos != nil {
		edges = append(edges, likes.EdgeVideos)
	}
	if m.removeduser != nil {
		edges = append(edges, likes.EdgeUser)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LikesMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case likes.EdgeVideos:
		ids := make([]ent.Value, 0, len(m.removedvideos))
		for id := range m.removedvideos {
			ids = append(ids, id)
		}
		return ids
	case likes.EdgeUser:
		ids := make([]ent.Value, 0, len(m.removeduser))
		for id := range m.removeduser {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LikesMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedvideos {
		edges = append(edges, likes.EdgeVideos)
	}
	if m.cleareduser {
		edges = append(edges, likes.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LikesMutation) EdgeCleared(name string) bool {
	switch name {
	case likes.EdgeVideos:
		return m.clearedvideos
	case likes.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LikesMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Likes unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LikesMutation) ResetEdge(name string) error {
	switch name {
	case likes.EdgeVideos:
		m.ResetVideos()
		return nil
	case likes.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Likes edge %s", name)
}

// UserProfileMutation represents an operation that mutates the UserProfile nodes in the graph.
type UserProfileMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	username           *string
	profileImage       *string
	clearedFields      map[string]struct{}
	_UserSecure        map[int]struct{}
	removed_UserSecure map[int]struct{}
	cleared_UserSecure bool
	done               bool
	oldValue           func(context.Context) (*UserProfile, error)
	predicates         []predicate.UserProfile
}

var _ ent.Mutation = (*UserProfileMutation)(nil)

// userprofileOption allows management of the mutation configuration using functional options.
type userprofileOption func(*UserProfileMutation)

// newUserProfileMutation creates new mutation for the UserProfile entity.
func newUserProfileMutation(c config, op Op, opts ...userprofileOption) *UserProfileMutation {
	m := &UserProfileMutation{
		config:        c,
		op:            op,
		typ:           TypeUserProfile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserProfileID sets the ID field of the mutation.
func withUserProfileID(id int) userprofileOption {
	return func(m *UserProfileMutation) {
		var (
			err   error
			once  sync.Once
			value *UserProfile
		)
		m.oldValue = func(ctx context.Context) (*UserProfile, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserProfile.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserProfile sets the old UserProfile of the mutation.
func withUserProfile(node *UserProfile) userprofileOption {
	return func(m *UserProfileMutation) {
		m.oldValue = func(context.Context) (*UserProfile, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserProfileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserProfileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserProfileMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserProfileMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserProfile.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *UserProfileMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserProfileMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the UserProfile entity.
// If the UserProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserProfileMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserProfileMutation) ResetUsername() {
	m.username = nil
}

// SetProfileImage sets the "profileImage" field.
func (m *UserProfileMutation) SetProfileImage(s string) {
	m.profileImage = &s
}

// ProfileImage returns the value of the "profileImage" field in the mutation.
func (m *UserProfileMutation) ProfileImage() (r string, exists bool) {
	v := m.profileImage
	if v == nil {
		return
	}
	return *v, true
}

// OldProfileImage returns the old "profileImage" field's value of the UserProfile entity.
// If the UserProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserProfileMutation) OldProfileImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProfileImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProfileImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProfileImage: %w", err)
	}
	return oldValue.ProfileImage, nil
}

// ResetProfileImage resets all changes to the "profileImage" field.
func (m *UserProfileMutation) ResetProfileImage() {
	m.profileImage = nil
}

// AddUserSecureIDs adds the "UserSecure" edge to the UserSec entity by ids.
func (m *UserProfileMutation) AddUserSecureIDs(ids ...int) {
	if m._UserSecure == nil {
		m._UserSecure = make(map[int]struct{})
	}
	for i := range ids {
		m._UserSecure[ids[i]] = struct{}{}
	}
}

// ClearUserSecure clears the "UserSecure" edge to the UserSec entity.
func (m *UserProfileMutation) ClearUserSecure() {
	m.cleared_UserSecure = true
}

// UserSecureCleared reports if the "UserSecure" edge to the UserSec entity was cleared.
func (m *UserProfileMutation) UserSecureCleared() bool {
	return m.cleared_UserSecure
}

// RemoveUserSecureIDs removes the "UserSecure" edge to the UserSec entity by IDs.
func (m *UserProfileMutation) RemoveUserSecureIDs(ids ...int) {
	if m.removed_UserSecure == nil {
		m.removed_UserSecure = make(map[int]struct{})
	}
	for i := range ids {
		delete(m._UserSecure, ids[i])
		m.removed_UserSecure[ids[i]] = struct{}{}
	}
}

// RemovedUserSecure returns the removed IDs of the "UserSecure" edge to the UserSec entity.
func (m *UserProfileMutation) RemovedUserSecureIDs() (ids []int) {
	for id := range m.removed_UserSecure {
		ids = append(ids, id)
	}
	return
}

// UserSecureIDs returns the "UserSecure" edge IDs in the mutation.
func (m *UserProfileMutation) UserSecureIDs() (ids []int) {
	for id := range m._UserSecure {
		ids = append(ids, id)
	}
	return
}

// ResetUserSecure resets all changes to the "UserSecure" edge.
func (m *UserProfileMutation) ResetUserSecure() {
	m._UserSecure = nil
	m.cleared_UserSecure = false
	m.removed_UserSecure = nil
}

// Where appends a list predicates to the UserProfileMutation builder.
func (m *UserProfileMutation) Where(ps ...predicate.UserProfile) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserProfileMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserProfileMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserProfile, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserProfileMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserProfileMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserProfile).
func (m *UserProfileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserProfileMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.username != nil {
		fields = append(fields, userprofile.FieldUsername)
	}
	if m.profileImage != nil {
		fields = append(fields, userprofile.FieldProfileImage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserProfileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userprofile.FieldUsername:
		return m.Username()
	case userprofile.FieldProfileImage:
		return m.ProfileImage()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserProfileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userprofile.FieldUsername:
		return m.OldUsername(ctx)
	case userprofile.FieldProfileImage:
		return m.OldProfileImage(ctx)
	}
	return nil, fmt.Errorf("unknown UserProfile field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserProfileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userprofile.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case userprofile.FieldProfileImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProfileImage(v)
		return nil
	}
	return fmt.Errorf("unknown UserProfile field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserProfileMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserProfileMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserProfileMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserProfile numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserProfileMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserProfileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserProfileMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserProfile nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserProfileMutation) ResetField(name string) error {
	switch name {
	case userprofile.FieldUsername:
		m.ResetUsername()
		return nil
	case userprofile.FieldProfileImage:
		m.ResetProfileImage()
		return nil
	}
	return fmt.Errorf("unknown UserProfile field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserProfileMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._UserSecure != nil {
		edges = append(edges, userprofile.EdgeUserSecure)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserProfileMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case userprofile.EdgeUserSecure:
		ids := make([]ent.Value, 0, len(m._UserSecure))
		for id := range m._UserSecure {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserProfileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_UserSecure != nil {
		edges = append(edges, userprofile.EdgeUserSecure)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserProfileMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case userprofile.EdgeUserSecure:
		ids := make([]ent.Value, 0, len(m.removed_UserSecure))
		for id := range m.removed_UserSecure {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserProfileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_UserSecure {
		edges = append(edges, userprofile.EdgeUserSecure)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserProfileMutation) EdgeCleared(name string) bool {
	switch name {
	case userprofile.EdgeUserSecure:
		return m.cleared_UserSecure
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserProfileMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown UserProfile unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserProfileMutation) ResetEdge(name string) error {
	switch name {
	case userprofile.EdgeUserSecure:
		m.ResetUserSecure()
		return nil
	}
	return fmt.Errorf("unknown UserProfile edge %s", name)
}

// UserSecMutation represents an operation that mutates the UserSec nodes in the graph.
type UserSecMutation struct {
	config
	op               Op
	typ              string
	id               *int
	password         *string
	email            *string
	address          *string
	clearedFields    map[string]struct{}
	profile          *int
	clearedprofile   bool
	videoId          map[int]struct{}
	removedvideoId   map[int]struct{}
	clearedvideoId   bool
	commentId        map[int]struct{}
	removedcommentId map[int]struct{}
	clearedcommentId bool
	likeId           map[int]struct{}
	removedlikeId    map[int]struct{}
	clearedlikeId    bool
	done             bool
	oldValue         func(context.Context) (*UserSec, error)
	predicates       []predicate.UserSec
}

var _ ent.Mutation = (*UserSecMutation)(nil)

// usersecOption allows management of the mutation configuration using functional options.
type usersecOption func(*UserSecMutation)

// newUserSecMutation creates new mutation for the UserSec entity.
func newUserSecMutation(c config, op Op, opts ...usersecOption) *UserSecMutation {
	m := &UserSecMutation{
		config:        c,
		op:            op,
		typ:           TypeUserSec,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserSecID sets the ID field of the mutation.
func withUserSecID(id int) usersecOption {
	return func(m *UserSecMutation) {
		var (
			err   error
			once  sync.Once
			value *UserSec
		)
		m.oldValue = func(ctx context.Context) (*UserSec, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserSec.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserSec sets the old UserSec of the mutation.
func withUserSec(node *UserSec) usersecOption {
	return func(m *UserSecMutation) {
		m.oldValue = func(context.Context) (*UserSec, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserSecMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserSecMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserSecMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserSecMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserSec.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPassword sets the "password" field.
func (m *UserSecMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserSecMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the UserSec entity.
// If the UserSec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSecMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserSecMutation) ResetPassword() {
	m.password = nil
}

// SetEmail sets the "email" field.
func (m *UserSecMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserSecMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the UserSec entity.
// If the UserSec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSecMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserSecMutation) ResetEmail() {
	m.email = nil
}

// SetAddress sets the "address" field.
func (m *UserSecMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *UserSecMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the UserSec entity.
// If the UserSec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSecMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *UserSecMutation) ResetAddress() {
	m.address = nil
}

// SetProfileID sets the "profile" edge to the UserProfile entity by id.
func (m *UserSecMutation) SetProfileID(id int) {
	m.profile = &id
}

// ClearProfile clears the "profile" edge to the UserProfile entity.
func (m *UserSecMutation) ClearProfile() {
	m.clearedprofile = true
}

// ProfileCleared reports if the "profile" edge to the UserProfile entity was cleared.
func (m *UserSecMutation) ProfileCleared() bool {
	return m.clearedprofile
}

// ProfileID returns the "profile" edge ID in the mutation.
func (m *UserSecMutation) ProfileID() (id int, exists bool) {
	if m.profile != nil {
		return *m.profile, true
	}
	return
}

// ProfileIDs returns the "profile" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProfileID instead. It exists only for internal usage by the builders.
func (m *UserSecMutation) ProfileIDs() (ids []int) {
	if id := m.profile; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProfile resets all changes to the "profile" edge.
func (m *UserSecMutation) ResetProfile() {
	m.profile = nil
	m.clearedprofile = false
}

// AddVideoIdIDs adds the "videoId" edge to the Videos entity by ids.
func (m *UserSecMutation) AddVideoIdIDs(ids ...int) {
	if m.videoId == nil {
		m.videoId = make(map[int]struct{})
	}
	for i := range ids {
		m.videoId[ids[i]] = struct{}{}
	}
}

// ClearVideoId clears the "videoId" edge to the Videos entity.
func (m *UserSecMutation) ClearVideoId() {
	m.clearedvideoId = true
}

// VideoIdCleared reports if the "videoId" edge to the Videos entity was cleared.
func (m *UserSecMutation) VideoIdCleared() bool {
	return m.clearedvideoId
}

// RemoveVideoIdIDs removes the "videoId" edge to the Videos entity by IDs.
func (m *UserSecMutation) RemoveVideoIdIDs(ids ...int) {
	if m.removedvideoId == nil {
		m.removedvideoId = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.videoId, ids[i])
		m.removedvideoId[ids[i]] = struct{}{}
	}
}

// RemovedVideoId returns the removed IDs of the "videoId" edge to the Videos entity.
func (m *UserSecMutation) RemovedVideoIdIDs() (ids []int) {
	for id := range m.removedvideoId {
		ids = append(ids, id)
	}
	return
}

// VideoIdIDs returns the "videoId" edge IDs in the mutation.
func (m *UserSecMutation) VideoIdIDs() (ids []int) {
	for id := range m.videoId {
		ids = append(ids, id)
	}
	return
}

// ResetVideoId resets all changes to the "videoId" edge.
func (m *UserSecMutation) ResetVideoId() {
	m.videoId = nil
	m.clearedvideoId = false
	m.removedvideoId = nil
}

// AddCommentIdIDs adds the "commentId" edge to the Comments entity by ids.
func (m *UserSecMutation) AddCommentIdIDs(ids ...int) {
	if m.commentId == nil {
		m.commentId = make(map[int]struct{})
	}
	for i := range ids {
		m.commentId[ids[i]] = struct{}{}
	}
}

// ClearCommentId clears the "commentId" edge to the Comments entity.
func (m *UserSecMutation) ClearCommentId() {
	m.clearedcommentId = true
}

// CommentIdCleared reports if the "commentId" edge to the Comments entity was cleared.
func (m *UserSecMutation) CommentIdCleared() bool {
	return m.clearedcommentId
}

// RemoveCommentIdIDs removes the "commentId" edge to the Comments entity by IDs.
func (m *UserSecMutation) RemoveCommentIdIDs(ids ...int) {
	if m.removedcommentId == nil {
		m.removedcommentId = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.commentId, ids[i])
		m.removedcommentId[ids[i]] = struct{}{}
	}
}

// RemovedCommentId returns the removed IDs of the "commentId" edge to the Comments entity.
func (m *UserSecMutation) RemovedCommentIdIDs() (ids []int) {
	for id := range m.removedcommentId {
		ids = append(ids, id)
	}
	return
}

// CommentIdIDs returns the "commentId" edge IDs in the mutation.
func (m *UserSecMutation) CommentIdIDs() (ids []int) {
	for id := range m.commentId {
		ids = append(ids, id)
	}
	return
}

// ResetCommentId resets all changes to the "commentId" edge.
func (m *UserSecMutation) ResetCommentId() {
	m.commentId = nil
	m.clearedcommentId = false
	m.removedcommentId = nil
}

// AddLikeIdIDs adds the "likeId" edge to the Likes entity by ids.
func (m *UserSecMutation) AddLikeIdIDs(ids ...int) {
	if m.likeId == nil {
		m.likeId = make(map[int]struct{})
	}
	for i := range ids {
		m.likeId[ids[i]] = struct{}{}
	}
}

// ClearLikeId clears the "likeId" edge to the Likes entity.
func (m *UserSecMutation) ClearLikeId() {
	m.clearedlikeId = true
}

// LikeIdCleared reports if the "likeId" edge to the Likes entity was cleared.
func (m *UserSecMutation) LikeIdCleared() bool {
	return m.clearedlikeId
}

// RemoveLikeIdIDs removes the "likeId" edge to the Likes entity by IDs.
func (m *UserSecMutation) RemoveLikeIdIDs(ids ...int) {
	if m.removedlikeId == nil {
		m.removedlikeId = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.likeId, ids[i])
		m.removedlikeId[ids[i]] = struct{}{}
	}
}

// RemovedLikeId returns the removed IDs of the "likeId" edge to the Likes entity.
func (m *UserSecMutation) RemovedLikeIdIDs() (ids []int) {
	for id := range m.removedlikeId {
		ids = append(ids, id)
	}
	return
}

// LikeIdIDs returns the "likeId" edge IDs in the mutation.
func (m *UserSecMutation) LikeIdIDs() (ids []int) {
	for id := range m.likeId {
		ids = append(ids, id)
	}
	return
}

// ResetLikeId resets all changes to the "likeId" edge.
func (m *UserSecMutation) ResetLikeId() {
	m.likeId = nil
	m.clearedlikeId = false
	m.removedlikeId = nil
}

// Where appends a list predicates to the UserSecMutation builder.
func (m *UserSecMutation) Where(ps ...predicate.UserSec) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserSecMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserSecMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserSec, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserSecMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserSecMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserSec).
func (m *UserSecMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserSecMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.password != nil {
		fields = append(fields, usersec.FieldPassword)
	}
	if m.email != nil {
		fields = append(fields, usersec.FieldEmail)
	}
	if m.address != nil {
		fields = append(fields, usersec.FieldAddress)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserSecMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case usersec.FieldPassword:
		return m.Password()
	case usersec.FieldEmail:
		return m.Email()
	case usersec.FieldAddress:
		return m.Address()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserSecMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case usersec.FieldPassword:
		return m.OldPassword(ctx)
	case usersec.FieldEmail:
		return m.OldEmail(ctx)
	case usersec.FieldAddress:
		return m.OldAddress(ctx)
	}
	return nil, fmt.Errorf("unknown UserSec field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserSecMutation) SetField(name string, value ent.Value) error {
	switch name {
	case usersec.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case usersec.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case usersec.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	}
	return fmt.Errorf("unknown UserSec field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserSecMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserSecMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserSecMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserSec numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserSecMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserSecMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserSecMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserSec nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserSecMutation) ResetField(name string) error {
	switch name {
	case usersec.FieldPassword:
		m.ResetPassword()
		return nil
	case usersec.FieldEmail:
		m.ResetEmail()
		return nil
	case usersec.FieldAddress:
		m.ResetAddress()
		return nil
	}
	return fmt.Errorf("unknown UserSec field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserSecMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.profile != nil {
		edges = append(edges, usersec.EdgeProfile)
	}
	if m.videoId != nil {
		edges = append(edges, usersec.EdgeVideoId)
	}
	if m.commentId != nil {
		edges = append(edges, usersec.EdgeCommentId)
	}
	if m.likeId != nil {
		edges = append(edges, usersec.EdgeLikeId)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserSecMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case usersec.EdgeProfile:
		if id := m.profile; id != nil {
			return []ent.Value{*id}
		}
	case usersec.EdgeVideoId:
		ids := make([]ent.Value, 0, len(m.videoId))
		for id := range m.videoId {
			ids = append(ids, id)
		}
		return ids
	case usersec.EdgeCommentId:
		ids := make([]ent.Value, 0, len(m.commentId))
		for id := range m.commentId {
			ids = append(ids, id)
		}
		return ids
	case usersec.EdgeLikeId:
		ids := make([]ent.Value, 0, len(m.likeId))
		for id := range m.likeId {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserSecMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedvideoId != nil {
		edges = append(edges, usersec.EdgeVideoId)
	}
	if m.removedcommentId != nil {
		edges = append(edges, usersec.EdgeCommentId)
	}
	if m.removedlikeId != nil {
		edges = append(edges, usersec.EdgeLikeId)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserSecMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case usersec.EdgeVideoId:
		ids := make([]ent.Value, 0, len(m.removedvideoId))
		for id := range m.removedvideoId {
			ids = append(ids, id)
		}
		return ids
	case usersec.EdgeCommentId:
		ids := make([]ent.Value, 0, len(m.removedcommentId))
		for id := range m.removedcommentId {
			ids = append(ids, id)
		}
		return ids
	case usersec.EdgeLikeId:
		ids := make([]ent.Value, 0, len(m.removedlikeId))
		for id := range m.removedlikeId {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserSecMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedprofile {
		edges = append(edges, usersec.EdgeProfile)
	}
	if m.clearedvideoId {
		edges = append(edges, usersec.EdgeVideoId)
	}
	if m.clearedcommentId {
		edges = append(edges, usersec.EdgeCommentId)
	}
	if m.clearedlikeId {
		edges = append(edges, usersec.EdgeLikeId)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserSecMutation) EdgeCleared(name string) bool {
	switch name {
	case usersec.EdgeProfile:
		return m.clearedprofile
	case usersec.EdgeVideoId:
		return m.clearedvideoId
	case usersec.EdgeCommentId:
		return m.clearedcommentId
	case usersec.EdgeLikeId:
		return m.clearedlikeId
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserSecMutation) ClearEdge(name string) error {
	switch name {
	case usersec.EdgeProfile:
		m.ClearProfile()
		return nil
	}
	return fmt.Errorf("unknown UserSec unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserSecMutation) ResetEdge(name string) error {
	switch name {
	case usersec.EdgeProfile:
		m.ResetProfile()
		return nil
	case usersec.EdgeVideoId:
		m.ResetVideoId()
		return nil
	case usersec.EdgeCommentId:
		m.ResetCommentId()
		return nil
	case usersec.EdgeLikeId:
		m.ResetLikeId()
		return nil
	}
	return fmt.Errorf("unknown UserSec edge %s", name)
}

// VideosMutation represents an operation that mutates the Videos nodes in the graph.
type VideosMutation struct {
	config
	op               Op
	typ              string
	id               *int
	_Desc            *string
	videoLink        *string
	thumb            *string
	likeNum          *uint64
	addlikeNum       *int64
	commentNum       *uint64
	addcommentNum    *int64
	clearedFields    map[string]struct{}
	user             *int
	cleareduser      bool
	likeId           map[int]struct{}
	removedlikeId    map[int]struct{}
	clearedlikeId    bool
	commentId        map[int]struct{}
	removedcommentId map[int]struct{}
	clearedcommentId bool
	done             bool
	oldValue         func(context.Context) (*Videos, error)
	predicates       []predicate.Videos
}

var _ ent.Mutation = (*VideosMutation)(nil)

// videosOption allows management of the mutation configuration using functional options.
type videosOption func(*VideosMutation)

// newVideosMutation creates new mutation for the Videos entity.
func newVideosMutation(c config, op Op, opts ...videosOption) *VideosMutation {
	m := &VideosMutation{
		config:        c,
		op:            op,
		typ:           TypeVideos,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVideosID sets the ID field of the mutation.
func withVideosID(id int) videosOption {
	return func(m *VideosMutation) {
		var (
			err   error
			once  sync.Once
			value *Videos
		)
		m.oldValue = func(ctx context.Context) (*Videos, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Videos.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVideos sets the old Videos of the mutation.
func withVideos(node *Videos) videosOption {
	return func(m *VideosMutation) {
		m.oldValue = func(context.Context) (*Videos, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VideosMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VideosMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VideosMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VideosMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Videos.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDesc sets the "Desc" field.
func (m *VideosMutation) SetDesc(s string) {
	m._Desc = &s
}

// Desc returns the value of the "Desc" field in the mutation.
func (m *VideosMutation) Desc() (r string, exists bool) {
	v := m._Desc
	if v == nil {
		return
	}
	return *v, true
}

// OldDesc returns the old "Desc" field's value of the Videos entity.
// If the Videos object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideosMutation) OldDesc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesc: %w", err)
	}
	return oldValue.Desc, nil
}

// ResetDesc resets all changes to the "Desc" field.
func (m *VideosMutation) ResetDesc() {
	m._Desc = nil
}

// SetVideoLink sets the "videoLink" field.
func (m *VideosMutation) SetVideoLink(s string) {
	m.videoLink = &s
}

// VideoLink returns the value of the "videoLink" field in the mutation.
func (m *VideosMutation) VideoLink() (r string, exists bool) {
	v := m.videoLink
	if v == nil {
		return
	}
	return *v, true
}

// OldVideoLink returns the old "videoLink" field's value of the Videos entity.
// If the Videos object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideosMutation) OldVideoLink(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVideoLink is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVideoLink requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVideoLink: %w", err)
	}
	return oldValue.VideoLink, nil
}

// ResetVideoLink resets all changes to the "videoLink" field.
func (m *VideosMutation) ResetVideoLink() {
	m.videoLink = nil
}

// SetThumb sets the "thumb" field.
func (m *VideosMutation) SetThumb(s string) {
	m.thumb = &s
}

// Thumb returns the value of the "thumb" field in the mutation.
func (m *VideosMutation) Thumb() (r string, exists bool) {
	v := m.thumb
	if v == nil {
		return
	}
	return *v, true
}

// OldThumb returns the old "thumb" field's value of the Videos entity.
// If the Videos object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideosMutation) OldThumb(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldThumb is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldThumb requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThumb: %w", err)
	}
	return oldValue.Thumb, nil
}

// ResetThumb resets all changes to the "thumb" field.
func (m *VideosMutation) ResetThumb() {
	m.thumb = nil
}

// SetLikeNum sets the "likeNum" field.
func (m *VideosMutation) SetLikeNum(u uint64) {
	m.likeNum = &u
	m.addlikeNum = nil
}

// LikeNum returns the value of the "likeNum" field in the mutation.
func (m *VideosMutation) LikeNum() (r uint64, exists bool) {
	v := m.likeNum
	if v == nil {
		return
	}
	return *v, true
}

// OldLikeNum returns the old "likeNum" field's value of the Videos entity.
// If the Videos object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideosMutation) OldLikeNum(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLikeNum is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLikeNum requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLikeNum: %w", err)
	}
	return oldValue.LikeNum, nil
}

// AddLikeNum adds u to the "likeNum" field.
func (m *VideosMutation) AddLikeNum(u int64) {
	if m.addlikeNum != nil {
		*m.addlikeNum += u
	} else {
		m.addlikeNum = &u
	}
}

// AddedLikeNum returns the value that was added to the "likeNum" field in this mutation.
func (m *VideosMutation) AddedLikeNum() (r int64, exists bool) {
	v := m.addlikeNum
	if v == nil {
		return
	}
	return *v, true
}

// ResetLikeNum resets all changes to the "likeNum" field.
func (m *VideosMutation) ResetLikeNum() {
	m.likeNum = nil
	m.addlikeNum = nil
}

// SetCommentNum sets the "commentNum" field.
func (m *VideosMutation) SetCommentNum(u uint64) {
	m.commentNum = &u
	m.addcommentNum = nil
}

// CommentNum returns the value of the "commentNum" field in the mutation.
func (m *VideosMutation) CommentNum() (r uint64, exists bool) {
	v := m.commentNum
	if v == nil {
		return
	}
	return *v, true
}

// OldCommentNum returns the old "commentNum" field's value of the Videos entity.
// If the Videos object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideosMutation) OldCommentNum(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCommentNum is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCommentNum requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCommentNum: %w", err)
	}
	return oldValue.CommentNum, nil
}

// AddCommentNum adds u to the "commentNum" field.
func (m *VideosMutation) AddCommentNum(u int64) {
	if m.addcommentNum != nil {
		*m.addcommentNum += u
	} else {
		m.addcommentNum = &u
	}
}

// AddedCommentNum returns the value that was added to the "commentNum" field in this mutation.
func (m *VideosMutation) AddedCommentNum() (r int64, exists bool) {
	v := m.addcommentNum
	if v == nil {
		return
	}
	return *v, true
}

// ResetCommentNum resets all changes to the "commentNum" field.
func (m *VideosMutation) ResetCommentNum() {
	m.commentNum = nil
	m.addcommentNum = nil
}

// SetUserID sets the "user" edge to the UserSec entity by id.
func (m *VideosMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the UserSec entity.
func (m *VideosMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the UserSec entity was cleared.
func (m *VideosMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *VideosMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *VideosMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *VideosMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// AddLikeIdIDs adds the "likeId" edge to the Likes entity by ids.
func (m *VideosMutation) AddLikeIdIDs(ids ...int) {
	if m.likeId == nil {
		m.likeId = make(map[int]struct{})
	}
	for i := range ids {
		m.likeId[ids[i]] = struct{}{}
	}
}

// ClearLikeId clears the "likeId" edge to the Likes entity.
func (m *VideosMutation) ClearLikeId() {
	m.clearedlikeId = true
}

// LikeIdCleared reports if the "likeId" edge to the Likes entity was cleared.
func (m *VideosMutation) LikeIdCleared() bool {
	return m.clearedlikeId
}

// RemoveLikeIdIDs removes the "likeId" edge to the Likes entity by IDs.
func (m *VideosMutation) RemoveLikeIdIDs(ids ...int) {
	if m.removedlikeId == nil {
		m.removedlikeId = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.likeId, ids[i])
		m.removedlikeId[ids[i]] = struct{}{}
	}
}

// RemovedLikeId returns the removed IDs of the "likeId" edge to the Likes entity.
func (m *VideosMutation) RemovedLikeIdIDs() (ids []int) {
	for id := range m.removedlikeId {
		ids = append(ids, id)
	}
	return
}

// LikeIdIDs returns the "likeId" edge IDs in the mutation.
func (m *VideosMutation) LikeIdIDs() (ids []int) {
	for id := range m.likeId {
		ids = append(ids, id)
	}
	return
}

// ResetLikeId resets all changes to the "likeId" edge.
func (m *VideosMutation) ResetLikeId() {
	m.likeId = nil
	m.clearedlikeId = false
	m.removedlikeId = nil
}

// AddCommentIdIDs adds the "commentId" edge to the Comments entity by ids.
func (m *VideosMutation) AddCommentIdIDs(ids ...int) {
	if m.commentId == nil {
		m.commentId = make(map[int]struct{})
	}
	for i := range ids {
		m.commentId[ids[i]] = struct{}{}
	}
}

// ClearCommentId clears the "commentId" edge to the Comments entity.
func (m *VideosMutation) ClearCommentId() {
	m.clearedcommentId = true
}

// CommentIdCleared reports if the "commentId" edge to the Comments entity was cleared.
func (m *VideosMutation) CommentIdCleared() bool {
	return m.clearedcommentId
}

// RemoveCommentIdIDs removes the "commentId" edge to the Comments entity by IDs.
func (m *VideosMutation) RemoveCommentIdIDs(ids ...int) {
	if m.removedcommentId == nil {
		m.removedcommentId = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.commentId, ids[i])
		m.removedcommentId[ids[i]] = struct{}{}
	}
}

// RemovedCommentId returns the removed IDs of the "commentId" edge to the Comments entity.
func (m *VideosMutation) RemovedCommentIdIDs() (ids []int) {
	for id := range m.removedcommentId {
		ids = append(ids, id)
	}
	return
}

// CommentIdIDs returns the "commentId" edge IDs in the mutation.
func (m *VideosMutation) CommentIdIDs() (ids []int) {
	for id := range m.commentId {
		ids = append(ids, id)
	}
	return
}

// ResetCommentId resets all changes to the "commentId" edge.
func (m *VideosMutation) ResetCommentId() {
	m.commentId = nil
	m.clearedcommentId = false
	m.removedcommentId = nil
}

// Where appends a list predicates to the VideosMutation builder.
func (m *VideosMutation) Where(ps ...predicate.Videos) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the VideosMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *VideosMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Videos, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *VideosMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *VideosMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Videos).
func (m *VideosMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VideosMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m._Desc != nil {
		fields = append(fields, videos.FieldDesc)
	}
	if m.videoLink != nil {
		fields = append(fields, videos.FieldVideoLink)
	}
	if m.thumb != nil {
		fields = append(fields, videos.FieldThumb)
	}
	if m.likeNum != nil {
		fields = append(fields, videos.FieldLikeNum)
	}
	if m.commentNum != nil {
		fields = append(fields, videos.FieldCommentNum)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VideosMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case videos.FieldDesc:
		return m.Desc()
	case videos.FieldVideoLink:
		return m.VideoLink()
	case videos.FieldThumb:
		return m.Thumb()
	case videos.FieldLikeNum:
		return m.LikeNum()
	case videos.FieldCommentNum:
		return m.CommentNum()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VideosMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case videos.FieldDesc:
		return m.OldDesc(ctx)
	case videos.FieldVideoLink:
		return m.OldVideoLink(ctx)
	case videos.FieldThumb:
		return m.OldThumb(ctx)
	case videos.FieldLikeNum:
		return m.OldLikeNum(ctx)
	case videos.FieldCommentNum:
		return m.OldCommentNum(ctx)
	}
	return nil, fmt.Errorf("unknown Videos field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VideosMutation) SetField(name string, value ent.Value) error {
	switch name {
	case videos.FieldDesc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesc(v)
		return nil
	case videos.FieldVideoLink:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVideoLink(v)
		return nil
	case videos.FieldThumb:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThumb(v)
		return nil
	case videos.FieldLikeNum:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLikeNum(v)
		return nil
	case videos.FieldCommentNum:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCommentNum(v)
		return nil
	}
	return fmt.Errorf("unknown Videos field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VideosMutation) AddedFields() []string {
	var fields []string
	if m.addlikeNum != nil {
		fields = append(fields, videos.FieldLikeNum)
	}
	if m.addcommentNum != nil {
		fields = append(fields, videos.FieldCommentNum)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VideosMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case videos.FieldLikeNum:
		return m.AddedLikeNum()
	case videos.FieldCommentNum:
		return m.AddedCommentNum()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VideosMutation) AddField(name string, value ent.Value) error {
	switch name {
	case videos.FieldLikeNum:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLikeNum(v)
		return nil
	case videos.FieldCommentNum:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCommentNum(v)
		return nil
	}
	return fmt.Errorf("unknown Videos numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VideosMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VideosMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VideosMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Videos nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VideosMutation) ResetField(name string) error {
	switch name {
	case videos.FieldDesc:
		m.ResetDesc()
		return nil
	case videos.FieldVideoLink:
		m.ResetVideoLink()
		return nil
	case videos.FieldThumb:
		m.ResetThumb()
		return nil
	case videos.FieldLikeNum:
		m.ResetLikeNum()
		return nil
	case videos.FieldCommentNum:
		m.ResetCommentNum()
		return nil
	}
	return fmt.Errorf("unknown Videos field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VideosMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.user != nil {
		edges = append(edges, videos.EdgeUser)
	}
	if m.likeId != nil {
		edges = append(edges, videos.EdgeLikeId)
	}
	if m.commentId != nil {
		edges = append(edges, videos.EdgeCommentId)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VideosMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case videos.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case videos.EdgeLikeId:
		ids := make([]ent.Value, 0, len(m.likeId))
		for id := range m.likeId {
			ids = append(ids, id)
		}
		return ids
	case videos.EdgeCommentId:
		ids := make([]ent.Value, 0, len(m.commentId))
		for id := range m.commentId {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VideosMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedlikeId != nil {
		edges = append(edges, videos.EdgeLikeId)
	}
	if m.removedcommentId != nil {
		edges = append(edges, videos.EdgeCommentId)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VideosMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case videos.EdgeLikeId:
		ids := make([]ent.Value, 0, len(m.removedlikeId))
		for id := range m.removedlikeId {
			ids = append(ids, id)
		}
		return ids
	case videos.EdgeCommentId:
		ids := make([]ent.Value, 0, len(m.removedcommentId))
		for id := range m.removedcommentId {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VideosMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareduser {
		edges = append(edges, videos.EdgeUser)
	}
	if m.clearedlikeId {
		edges = append(edges, videos.EdgeLikeId)
	}
	if m.clearedcommentId {
		edges = append(edges, videos.EdgeCommentId)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VideosMutation) EdgeCleared(name string) bool {
	switch name {
	case videos.EdgeUser:
		return m.cleareduser
	case videos.EdgeLikeId:
		return m.clearedlikeId
	case videos.EdgeCommentId:
		return m.clearedcommentId
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VideosMutation) ClearEdge(name string) error {
	switch name {
	case videos.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Videos unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VideosMutation) ResetEdge(name string) error {
	switch name {
	case videos.EdgeUser:
		m.ResetUser()
		return nil
	case videos.EdgeLikeId:
		m.ResetLikeId()
		return nil
	case videos.EdgeCommentId:
		m.ResetCommentId()
		return nil
	}
	return fmt.Errorf("unknown Videos edge %s", name)
}
