// Code generated by ent, DO NOT EDIT.

package userprofile

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the userprofile type in the database.
	Label = "user_profile"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldProfileImage holds the string denoting the profileimage field in the database.
	FieldProfileImage = "profile_image"
	// EdgeUserSecure holds the string denoting the usersecure edge name in mutations.
	EdgeUserSecure = "UserSecure"
	// Table holds the table name of the userprofile in the database.
	Table = "user_profiles"
	// UserSecureTable is the table that holds the UserSecure relation/edge.
	UserSecureTable = "user_secs"
	// UserSecureInverseTable is the table name for the UserSec entity.
	// It exists in this package in order to avoid circular dependency with the "usersec" package.
	UserSecureInverseTable = "user_secs"
	// UserSecureColumn is the table column denoting the UserSecure relation/edge.
	UserSecureColumn = "user_profile_user_secure"
)

// Columns holds all SQL columns for userprofile fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldProfileImage,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the UserProfile queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByProfileImage orders the results by the profileImage field.
func ByProfileImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProfileImage, opts...).ToFunc()
}

// ByUserSecureCount orders the results by UserSecure count.
func ByUserSecureCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserSecureStep(), opts...)
	}
}

// ByUserSecure orders the results by UserSecure terms.
func ByUserSecure(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserSecureStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserSecureStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserSecureInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserSecureTable, UserSecureColumn),
	)
}
