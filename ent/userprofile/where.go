// Code generated by ent, DO NOT EDIT.

package userprofile

import (
	"server04/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLTE(FieldID, id))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldUsername, v))
}

// ProfileImage applies equality check predicate on the "profileImage" field. It's identical to ProfileImageEQ.
func ProfileImage(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldProfileImage, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldContainsFold(FieldUsername, v))
}

// ProfileImageEQ applies the EQ predicate on the "profileImage" field.
func ProfileImageEQ(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldProfileImage, v))
}

// ProfileImageNEQ applies the NEQ predicate on the "profileImage" field.
func ProfileImageNEQ(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNEQ(FieldProfileImage, v))
}

// ProfileImageIn applies the In predicate on the "profileImage" field.
func ProfileImageIn(vs ...string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldIn(FieldProfileImage, vs...))
}

// ProfileImageNotIn applies the NotIn predicate on the "profileImage" field.
func ProfileImageNotIn(vs ...string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNotIn(FieldProfileImage, vs...))
}

// ProfileImageGT applies the GT predicate on the "profileImage" field.
func ProfileImageGT(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGT(FieldProfileImage, v))
}

// ProfileImageGTE applies the GTE predicate on the "profileImage" field.
func ProfileImageGTE(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGTE(FieldProfileImage, v))
}

// ProfileImageLT applies the LT predicate on the "profileImage" field.
func ProfileImageLT(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLT(FieldProfileImage, v))
}

// ProfileImageLTE applies the LTE predicate on the "profileImage" field.
func ProfileImageLTE(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLTE(FieldProfileImage, v))
}

// ProfileImageContains applies the Contains predicate on the "profileImage" field.
func ProfileImageContains(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldContains(FieldProfileImage, v))
}

// ProfileImageHasPrefix applies the HasPrefix predicate on the "profileImage" field.
func ProfileImageHasPrefix(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldHasPrefix(FieldProfileImage, v))
}

// ProfileImageHasSuffix applies the HasSuffix predicate on the "profileImage" field.
func ProfileImageHasSuffix(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldHasSuffix(FieldProfileImage, v))
}

// ProfileImageEqualFold applies the EqualFold predicate on the "profileImage" field.
func ProfileImageEqualFold(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEqualFold(FieldProfileImage, v))
}

// ProfileImageContainsFold applies the ContainsFold predicate on the "profileImage" field.
func ProfileImageContainsFold(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldContainsFold(FieldProfileImage, v))
}

// HasUserSecure applies the HasEdge predicate on the "UserSecure" edge.
func HasUserSecure() predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserSecureTable, UserSecureColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserSecureWith applies the HasEdge predicate on the "UserSecure" edge with a given conditions (other predicates).
func HasUserSecureWith(preds ...predicate.UserSec) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		step := newUserSecureStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserProfile) predicate.UserProfile {
	return predicate.UserProfile(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserProfile) predicate.UserProfile {
	return predicate.UserProfile(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserProfile) predicate.UserProfile {
	return predicate.UserProfile(sql.NotPredicates(p))
}
