// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"server04/ent/userprofile"
	"server04/ent/usersec"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserSec is the model entity for the UserSec schema.
type UserSec struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserSecQuery when eager-loading is set.
	Edges                    UserSecEdges `json:"edges"`
	user_profile_user_secure *int
	selectValues             sql.SelectValues
}

// UserSecEdges holds the relations/edges for other nodes in the graph.
type UserSecEdges struct {
	// Profile holds the value of the profile edge.
	Profile *UserProfile `json:"profile,omitempty"`
	// VideoId holds the value of the videoId edge.
	VideoId []*Videos `json:"videoId,omitempty"`
	// CommentId holds the value of the commentId edge.
	CommentId []*Comments `json:"commentId,omitempty"`
	// LikeId holds the value of the likeId edge.
	LikeId []*Likes `json:"likeId,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ProfileOrErr returns the Profile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserSecEdges) ProfileOrErr() (*UserProfile, error) {
	if e.loadedTypes[0] {
		if e.Profile == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: userprofile.Label}
		}
		return e.Profile, nil
	}
	return nil, &NotLoadedError{edge: "profile"}
}

// VideoIdOrErr returns the VideoId value or an error if the edge
// was not loaded in eager-loading.
func (e UserSecEdges) VideoIdOrErr() ([]*Videos, error) {
	if e.loadedTypes[1] {
		return e.VideoId, nil
	}
	return nil, &NotLoadedError{edge: "videoId"}
}

// CommentIdOrErr returns the CommentId value or an error if the edge
// was not loaded in eager-loading.
func (e UserSecEdges) CommentIdOrErr() ([]*Comments, error) {
	if e.loadedTypes[2] {
		return e.CommentId, nil
	}
	return nil, &NotLoadedError{edge: "commentId"}
}

// LikeIdOrErr returns the LikeId value or an error if the edge
// was not loaded in eager-loading.
func (e UserSecEdges) LikeIdOrErr() ([]*Likes, error) {
	if e.loadedTypes[3] {
		return e.LikeId, nil
	}
	return nil, &NotLoadedError{edge: "likeId"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserSec) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usersec.FieldID:
			values[i] = new(sql.NullInt64)
		case usersec.FieldPassword, usersec.FieldEmail, usersec.FieldAddress:
			values[i] = new(sql.NullString)
		case usersec.ForeignKeys[0]: // user_profile_user_secure
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserSec fields.
func (us *UserSec) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usersec.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			us.ID = int(value.Int64)
		case usersec.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				us.Password = value.String
			}
		case usersec.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				us.Email = value.String
			}
		case usersec.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				us.Address = value.String
			}
		case usersec.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_profile_user_secure", value)
			} else if value.Valid {
				us.user_profile_user_secure = new(int)
				*us.user_profile_user_secure = int(value.Int64)
			}
		default:
			us.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserSec.
// This includes values selected through modifiers, order, etc.
func (us *UserSec) Value(name string) (ent.Value, error) {
	return us.selectValues.Get(name)
}

// QueryProfile queries the "profile" edge of the UserSec entity.
func (us *UserSec) QueryProfile() *UserProfileQuery {
	return NewUserSecClient(us.config).QueryProfile(us)
}

// QueryVideoId queries the "videoId" edge of the UserSec entity.
func (us *UserSec) QueryVideoId() *VideosQuery {
	return NewUserSecClient(us.config).QueryVideoId(us)
}

// QueryCommentId queries the "commentId" edge of the UserSec entity.
func (us *UserSec) QueryCommentId() *CommentsQuery {
	return NewUserSecClient(us.config).QueryCommentId(us)
}

// QueryLikeId queries the "likeId" edge of the UserSec entity.
func (us *UserSec) QueryLikeId() *LikesQuery {
	return NewUserSecClient(us.config).QueryLikeId(us)
}

// Update returns a builder for updating this UserSec.
// Note that you need to call UserSec.Unwrap() before calling this method if this UserSec
// was returned from a transaction, and the transaction was committed or rolled back.
func (us *UserSec) Update() *UserSecUpdateOne {
	return NewUserSecClient(us.config).UpdateOne(us)
}

// Unwrap unwraps the UserSec entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (us *UserSec) Unwrap() *UserSec {
	_tx, ok := us.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserSec is not a transactional entity")
	}
	us.config.driver = _tx.drv
	return us
}

// String implements the fmt.Stringer.
func (us *UserSec) String() string {
	var builder strings.Builder
	builder.WriteString("UserSec(")
	builder.WriteString(fmt.Sprintf("id=%v, ", us.ID))
	builder.WriteString("password=")
	builder.WriteString(us.Password)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(us.Email)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(us.Address)
	builder.WriteByte(')')
	return builder.String()
}

// UserSecs is a parsable slice of UserSec.
type UserSecs []*UserSec
