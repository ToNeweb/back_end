// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server04/ent/comments"
	"server04/ent/likes"
	"server04/ent/predicate"
	"server04/ent/userprofile"
	"server04/ent/usersec"
	"server04/ent/videos"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserSecUpdate is the builder for updating UserSec entities.
type UserSecUpdate struct {
	config
	hooks    []Hook
	mutation *UserSecMutation
}

// Where appends a list predicates to the UserSecUpdate builder.
func (usu *UserSecUpdate) Where(ps ...predicate.UserSec) *UserSecUpdate {
	usu.mutation.Where(ps...)
	return usu
}

// SetPassword sets the "password" field.
func (usu *UserSecUpdate) SetPassword(s string) *UserSecUpdate {
	usu.mutation.SetPassword(s)
	return usu
}

// SetEmail sets the "email" field.
func (usu *UserSecUpdate) SetEmail(s string) *UserSecUpdate {
	usu.mutation.SetEmail(s)
	return usu
}

// SetAddress sets the "address" field.
func (usu *UserSecUpdate) SetAddress(s string) *UserSecUpdate {
	usu.mutation.SetAddress(s)
	return usu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (usu *UserSecUpdate) SetNillableAddress(s *string) *UserSecUpdate {
	if s != nil {
		usu.SetAddress(*s)
	}
	return usu
}

// SetProfileID sets the "profile" edge to the UserProfile entity by ID.
func (usu *UserSecUpdate) SetProfileID(id int) *UserSecUpdate {
	usu.mutation.SetProfileID(id)
	return usu
}

// SetNillableProfileID sets the "profile" edge to the UserProfile entity by ID if the given value is not nil.
func (usu *UserSecUpdate) SetNillableProfileID(id *int) *UserSecUpdate {
	if id != nil {
		usu = usu.SetProfileID(*id)
	}
	return usu
}

// SetProfile sets the "profile" edge to the UserProfile entity.
func (usu *UserSecUpdate) SetProfile(u *UserProfile) *UserSecUpdate {
	return usu.SetProfileID(u.ID)
}

// AddVideoIdIDs adds the "videoId" edge to the Videos entity by IDs.
func (usu *UserSecUpdate) AddVideoIdIDs(ids ...int) *UserSecUpdate {
	usu.mutation.AddVideoIdIDs(ids...)
	return usu
}

// AddVideoId adds the "videoId" edges to the Videos entity.
func (usu *UserSecUpdate) AddVideoId(v ...*Videos) *UserSecUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return usu.AddVideoIdIDs(ids...)
}

// AddCommentIdIDs adds the "commentId" edge to the Comments entity by IDs.
func (usu *UserSecUpdate) AddCommentIdIDs(ids ...int) *UserSecUpdate {
	usu.mutation.AddCommentIdIDs(ids...)
	return usu
}

// AddCommentId adds the "commentId" edges to the Comments entity.
func (usu *UserSecUpdate) AddCommentId(c ...*Comments) *UserSecUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return usu.AddCommentIdIDs(ids...)
}

// AddLikeIdIDs adds the "likeId" edge to the Likes entity by IDs.
func (usu *UserSecUpdate) AddLikeIdIDs(ids ...int) *UserSecUpdate {
	usu.mutation.AddLikeIdIDs(ids...)
	return usu
}

// AddLikeId adds the "likeId" edges to the Likes entity.
func (usu *UserSecUpdate) AddLikeId(l ...*Likes) *UserSecUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return usu.AddLikeIdIDs(ids...)
}

// Mutation returns the UserSecMutation object of the builder.
func (usu *UserSecUpdate) Mutation() *UserSecMutation {
	return usu.mutation
}

// ClearProfile clears the "profile" edge to the UserProfile entity.
func (usu *UserSecUpdate) ClearProfile() *UserSecUpdate {
	usu.mutation.ClearProfile()
	return usu
}

// ClearVideoId clears all "videoId" edges to the Videos entity.
func (usu *UserSecUpdate) ClearVideoId() *UserSecUpdate {
	usu.mutation.ClearVideoId()
	return usu
}

// RemoveVideoIdIDs removes the "videoId" edge to Videos entities by IDs.
func (usu *UserSecUpdate) RemoveVideoIdIDs(ids ...int) *UserSecUpdate {
	usu.mutation.RemoveVideoIdIDs(ids...)
	return usu
}

// RemoveVideoId removes "videoId" edges to Videos entities.
func (usu *UserSecUpdate) RemoveVideoId(v ...*Videos) *UserSecUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return usu.RemoveVideoIdIDs(ids...)
}

// ClearCommentId clears all "commentId" edges to the Comments entity.
func (usu *UserSecUpdate) ClearCommentId() *UserSecUpdate {
	usu.mutation.ClearCommentId()
	return usu
}

// RemoveCommentIdIDs removes the "commentId" edge to Comments entities by IDs.
func (usu *UserSecUpdate) RemoveCommentIdIDs(ids ...int) *UserSecUpdate {
	usu.mutation.RemoveCommentIdIDs(ids...)
	return usu
}

// RemoveCommentId removes "commentId" edges to Comments entities.
func (usu *UserSecUpdate) RemoveCommentId(c ...*Comments) *UserSecUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return usu.RemoveCommentIdIDs(ids...)
}

// ClearLikeId clears all "likeId" edges to the Likes entity.
func (usu *UserSecUpdate) ClearLikeId() *UserSecUpdate {
	usu.mutation.ClearLikeId()
	return usu
}

// RemoveLikeIdIDs removes the "likeId" edge to Likes entities by IDs.
func (usu *UserSecUpdate) RemoveLikeIdIDs(ids ...int) *UserSecUpdate {
	usu.mutation.RemoveLikeIdIDs(ids...)
	return usu
}

// RemoveLikeId removes "likeId" edges to Likes entities.
func (usu *UserSecUpdate) RemoveLikeId(l ...*Likes) *UserSecUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return usu.RemoveLikeIdIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (usu *UserSecUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, usu.sqlSave, usu.mutation, usu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (usu *UserSecUpdate) SaveX(ctx context.Context) int {
	affected, err := usu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (usu *UserSecUpdate) Exec(ctx context.Context) error {
	_, err := usu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usu *UserSecUpdate) ExecX(ctx context.Context) {
	if err := usu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (usu *UserSecUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(usersec.Table, usersec.Columns, sqlgraph.NewFieldSpec(usersec.FieldID, field.TypeInt))
	if ps := usu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usu.mutation.Password(); ok {
		_spec.SetField(usersec.FieldPassword, field.TypeString, value)
	}
	if value, ok := usu.mutation.Email(); ok {
		_spec.SetField(usersec.FieldEmail, field.TypeString, value)
	}
	if value, ok := usu.mutation.Address(); ok {
		_spec.SetField(usersec.FieldAddress, field.TypeString, value)
	}
	if usu.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usersec.ProfileTable,
			Columns: []string{usersec.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usu.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usersec.ProfileTable,
			Columns: []string{usersec.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if usu.mutation.VideoIdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   usersec.VideoIdTable,
			Columns: usersec.VideoIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videos.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usu.mutation.RemovedVideoIdIDs(); len(nodes) > 0 && !usu.mutation.VideoIdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   usersec.VideoIdTable,
			Columns: usersec.VideoIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videos.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usu.mutation.VideoIdIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   usersec.VideoIdTable,
			Columns: usersec.VideoIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videos.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if usu.mutation.CommentIdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   usersec.CommentIdTable,
			Columns: usersec.CommentIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comments.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usu.mutation.RemovedCommentIdIDs(); len(nodes) > 0 && !usu.mutation.CommentIdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   usersec.CommentIdTable,
			Columns: usersec.CommentIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comments.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usu.mutation.CommentIdIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   usersec.CommentIdTable,
			Columns: usersec.CommentIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comments.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if usu.mutation.LikeIdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   usersec.LikeIdTable,
			Columns: usersec.LikeIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(likes.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usu.mutation.RemovedLikeIdIDs(); len(nodes) > 0 && !usu.mutation.LikeIdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   usersec.LikeIdTable,
			Columns: usersec.LikeIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(likes.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usu.mutation.LikeIdIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   usersec.LikeIdTable,
			Columns: usersec.LikeIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(likes.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, usu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usersec.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	usu.mutation.done = true
	return n, nil
}

// UserSecUpdateOne is the builder for updating a single UserSec entity.
type UserSecUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserSecMutation
}

// SetPassword sets the "password" field.
func (usuo *UserSecUpdateOne) SetPassword(s string) *UserSecUpdateOne {
	usuo.mutation.SetPassword(s)
	return usuo
}

// SetEmail sets the "email" field.
func (usuo *UserSecUpdateOne) SetEmail(s string) *UserSecUpdateOne {
	usuo.mutation.SetEmail(s)
	return usuo
}

// SetAddress sets the "address" field.
func (usuo *UserSecUpdateOne) SetAddress(s string) *UserSecUpdateOne {
	usuo.mutation.SetAddress(s)
	return usuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (usuo *UserSecUpdateOne) SetNillableAddress(s *string) *UserSecUpdateOne {
	if s != nil {
		usuo.SetAddress(*s)
	}
	return usuo
}

// SetProfileID sets the "profile" edge to the UserProfile entity by ID.
func (usuo *UserSecUpdateOne) SetProfileID(id int) *UserSecUpdateOne {
	usuo.mutation.SetProfileID(id)
	return usuo
}

// SetNillableProfileID sets the "profile" edge to the UserProfile entity by ID if the given value is not nil.
func (usuo *UserSecUpdateOne) SetNillableProfileID(id *int) *UserSecUpdateOne {
	if id != nil {
		usuo = usuo.SetProfileID(*id)
	}
	return usuo
}

// SetProfile sets the "profile" edge to the UserProfile entity.
func (usuo *UserSecUpdateOne) SetProfile(u *UserProfile) *UserSecUpdateOne {
	return usuo.SetProfileID(u.ID)
}

// AddVideoIdIDs adds the "videoId" edge to the Videos entity by IDs.
func (usuo *UserSecUpdateOne) AddVideoIdIDs(ids ...int) *UserSecUpdateOne {
	usuo.mutation.AddVideoIdIDs(ids...)
	return usuo
}

// AddVideoId adds the "videoId" edges to the Videos entity.
func (usuo *UserSecUpdateOne) AddVideoId(v ...*Videos) *UserSecUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return usuo.AddVideoIdIDs(ids...)
}

// AddCommentIdIDs adds the "commentId" edge to the Comments entity by IDs.
func (usuo *UserSecUpdateOne) AddCommentIdIDs(ids ...int) *UserSecUpdateOne {
	usuo.mutation.AddCommentIdIDs(ids...)
	return usuo
}

// AddCommentId adds the "commentId" edges to the Comments entity.
func (usuo *UserSecUpdateOne) AddCommentId(c ...*Comments) *UserSecUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return usuo.AddCommentIdIDs(ids...)
}

// AddLikeIdIDs adds the "likeId" edge to the Likes entity by IDs.
func (usuo *UserSecUpdateOne) AddLikeIdIDs(ids ...int) *UserSecUpdateOne {
	usuo.mutation.AddLikeIdIDs(ids...)
	return usuo
}

// AddLikeId adds the "likeId" edges to the Likes entity.
func (usuo *UserSecUpdateOne) AddLikeId(l ...*Likes) *UserSecUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return usuo.AddLikeIdIDs(ids...)
}

// Mutation returns the UserSecMutation object of the builder.
func (usuo *UserSecUpdateOne) Mutation() *UserSecMutation {
	return usuo.mutation
}

// ClearProfile clears the "profile" edge to the UserProfile entity.
func (usuo *UserSecUpdateOne) ClearProfile() *UserSecUpdateOne {
	usuo.mutation.ClearProfile()
	return usuo
}

// ClearVideoId clears all "videoId" edges to the Videos entity.
func (usuo *UserSecUpdateOne) ClearVideoId() *UserSecUpdateOne {
	usuo.mutation.ClearVideoId()
	return usuo
}

// RemoveVideoIdIDs removes the "videoId" edge to Videos entities by IDs.
func (usuo *UserSecUpdateOne) RemoveVideoIdIDs(ids ...int) *UserSecUpdateOne {
	usuo.mutation.RemoveVideoIdIDs(ids...)
	return usuo
}

// RemoveVideoId removes "videoId" edges to Videos entities.
func (usuo *UserSecUpdateOne) RemoveVideoId(v ...*Videos) *UserSecUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return usuo.RemoveVideoIdIDs(ids...)
}

// ClearCommentId clears all "commentId" edges to the Comments entity.
func (usuo *UserSecUpdateOne) ClearCommentId() *UserSecUpdateOne {
	usuo.mutation.ClearCommentId()
	return usuo
}

// RemoveCommentIdIDs removes the "commentId" edge to Comments entities by IDs.
func (usuo *UserSecUpdateOne) RemoveCommentIdIDs(ids ...int) *UserSecUpdateOne {
	usuo.mutation.RemoveCommentIdIDs(ids...)
	return usuo
}

// RemoveCommentId removes "commentId" edges to Comments entities.
func (usuo *UserSecUpdateOne) RemoveCommentId(c ...*Comments) *UserSecUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return usuo.RemoveCommentIdIDs(ids...)
}

// ClearLikeId clears all "likeId" edges to the Likes entity.
func (usuo *UserSecUpdateOne) ClearLikeId() *UserSecUpdateOne {
	usuo.mutation.ClearLikeId()
	return usuo
}

// RemoveLikeIdIDs removes the "likeId" edge to Likes entities by IDs.
func (usuo *UserSecUpdateOne) RemoveLikeIdIDs(ids ...int) *UserSecUpdateOne {
	usuo.mutation.RemoveLikeIdIDs(ids...)
	return usuo
}

// RemoveLikeId removes "likeId" edges to Likes entities.
func (usuo *UserSecUpdateOne) RemoveLikeId(l ...*Likes) *UserSecUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return usuo.RemoveLikeIdIDs(ids...)
}

// Where appends a list predicates to the UserSecUpdate builder.
func (usuo *UserSecUpdateOne) Where(ps ...predicate.UserSec) *UserSecUpdateOne {
	usuo.mutation.Where(ps...)
	return usuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (usuo *UserSecUpdateOne) Select(field string, fields ...string) *UserSecUpdateOne {
	usuo.fields = append([]string{field}, fields...)
	return usuo
}

// Save executes the query and returns the updated UserSec entity.
func (usuo *UserSecUpdateOne) Save(ctx context.Context) (*UserSec, error) {
	return withHooks(ctx, usuo.sqlSave, usuo.mutation, usuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (usuo *UserSecUpdateOne) SaveX(ctx context.Context) *UserSec {
	node, err := usuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (usuo *UserSecUpdateOne) Exec(ctx context.Context) error {
	_, err := usuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usuo *UserSecUpdateOne) ExecX(ctx context.Context) {
	if err := usuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (usuo *UserSecUpdateOne) sqlSave(ctx context.Context) (_node *UserSec, err error) {
	_spec := sqlgraph.NewUpdateSpec(usersec.Table, usersec.Columns, sqlgraph.NewFieldSpec(usersec.FieldID, field.TypeInt))
	id, ok := usuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserSec.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := usuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usersec.FieldID)
		for _, f := range fields {
			if !usersec.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usersec.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := usuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usuo.mutation.Password(); ok {
		_spec.SetField(usersec.FieldPassword, field.TypeString, value)
	}
	if value, ok := usuo.mutation.Email(); ok {
		_spec.SetField(usersec.FieldEmail, field.TypeString, value)
	}
	if value, ok := usuo.mutation.Address(); ok {
		_spec.SetField(usersec.FieldAddress, field.TypeString, value)
	}
	if usuo.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usersec.ProfileTable,
			Columns: []string{usersec.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usuo.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usersec.ProfileTable,
			Columns: []string{usersec.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if usuo.mutation.VideoIdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   usersec.VideoIdTable,
			Columns: usersec.VideoIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videos.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usuo.mutation.RemovedVideoIdIDs(); len(nodes) > 0 && !usuo.mutation.VideoIdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   usersec.VideoIdTable,
			Columns: usersec.VideoIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videos.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usuo.mutation.VideoIdIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   usersec.VideoIdTable,
			Columns: usersec.VideoIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videos.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if usuo.mutation.CommentIdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   usersec.CommentIdTable,
			Columns: usersec.CommentIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comments.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usuo.mutation.RemovedCommentIdIDs(); len(nodes) > 0 && !usuo.mutation.CommentIdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   usersec.CommentIdTable,
			Columns: usersec.CommentIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comments.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usuo.mutation.CommentIdIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   usersec.CommentIdTable,
			Columns: usersec.CommentIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comments.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if usuo.mutation.LikeIdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   usersec.LikeIdTable,
			Columns: usersec.LikeIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(likes.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usuo.mutation.RemovedLikeIdIDs(); len(nodes) > 0 && !usuo.mutation.LikeIdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   usersec.LikeIdTable,
			Columns: usersec.LikeIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(likes.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usuo.mutation.LikeIdIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   usersec.LikeIdTable,
			Columns: usersec.LikeIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(likes.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserSec{config: usuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, usuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usersec.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	usuo.mutation.done = true
	return _node, nil
}
