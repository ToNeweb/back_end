// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"server04/ent/videos"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Videos is the model entity for the Videos schema.
type Videos struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Desc holds the value of the "Desc" field.
	Desc string `json:"Desc,omitempty"`
	// VideoLink holds the value of the "videoLink" field.
	VideoLink string `json:"videoLink,omitempty"`
	// Thumb holds the value of the "thumb" field.
	Thumb string `json:"thumb,omitempty"`
	// LikeNum holds the value of the "likeNum" field.
	LikeNum uint64 `json:"likeNum,omitempty"`
	// CommentNum holds the value of the "commentNum" field.
	CommentNum uint64 `json:"commentNum,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VideosQuery when eager-loading is set.
	Edges        VideosEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VideosEdges holds the relations/edges for other nodes in the graph.
type VideosEdges struct {
	// User holds the value of the user edge.
	User []*UserSec `json:"user,omitempty"`
	// LikeId holds the value of the likeId edge.
	LikeId []*Likes `json:"likeId,omitempty"`
	// CommentId holds the value of the commentId edge.
	CommentId []*Comments `json:"commentId,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e VideosEdges) UserOrErr() ([]*UserSec, error) {
	if e.loadedTypes[0] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// LikeIdOrErr returns the LikeId value or an error if the edge
// was not loaded in eager-loading.
func (e VideosEdges) LikeIdOrErr() ([]*Likes, error) {
	if e.loadedTypes[1] {
		return e.LikeId, nil
	}
	return nil, &NotLoadedError{edge: "likeId"}
}

// CommentIdOrErr returns the CommentId value or an error if the edge
// was not loaded in eager-loading.
func (e VideosEdges) CommentIdOrErr() ([]*Comments, error) {
	if e.loadedTypes[2] {
		return e.CommentId, nil
	}
	return nil, &NotLoadedError{edge: "commentId"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Videos) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case videos.FieldID, videos.FieldLikeNum, videos.FieldCommentNum:
			values[i] = new(sql.NullInt64)
		case videos.FieldDesc, videos.FieldVideoLink, videos.FieldThumb:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Videos fields.
func (v *Videos) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case videos.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			v.ID = int(value.Int64)
		case videos.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Desc", values[i])
			} else if value.Valid {
				v.Desc = value.String
			}
		case videos.FieldVideoLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field videoLink", values[i])
			} else if value.Valid {
				v.VideoLink = value.String
			}
		case videos.FieldThumb:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field thumb", values[i])
			} else if value.Valid {
				v.Thumb = value.String
			}
		case videos.FieldLikeNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field likeNum", values[i])
			} else if value.Valid {
				v.LikeNum = uint64(value.Int64)
			}
		case videos.FieldCommentNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field commentNum", values[i])
			} else if value.Valid {
				v.CommentNum = uint64(value.Int64)
			}
		default:
			v.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Videos.
// This includes values selected through modifiers, order, etc.
func (v *Videos) Value(name string) (ent.Value, error) {
	return v.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Videos entity.
func (v *Videos) QueryUser() *UserSecQuery {
	return NewVideosClient(v.config).QueryUser(v)
}

// QueryLikeId queries the "likeId" edge of the Videos entity.
func (v *Videos) QueryLikeId() *LikesQuery {
	return NewVideosClient(v.config).QueryLikeId(v)
}

// QueryCommentId queries the "commentId" edge of the Videos entity.
func (v *Videos) QueryCommentId() *CommentsQuery {
	return NewVideosClient(v.config).QueryCommentId(v)
}

// Update returns a builder for updating this Videos.
// Note that you need to call Videos.Unwrap() before calling this method if this Videos
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Videos) Update() *VideosUpdateOne {
	return NewVideosClient(v.config).UpdateOne(v)
}

// Unwrap unwraps the Videos entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Videos) Unwrap() *Videos {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Videos is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Videos) String() string {
	var builder strings.Builder
	builder.WriteString("Videos(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("Desc=")
	builder.WriteString(v.Desc)
	builder.WriteString(", ")
	builder.WriteString("videoLink=")
	builder.WriteString(v.VideoLink)
	builder.WriteString(", ")
	builder.WriteString("thumb=")
	builder.WriteString(v.Thumb)
	builder.WriteString(", ")
	builder.WriteString("likeNum=")
	builder.WriteString(fmt.Sprintf("%v", v.LikeNum))
	builder.WriteString(", ")
	builder.WriteString("commentNum=")
	builder.WriteString(fmt.Sprintf("%v", v.CommentNum))
	builder.WriteByte(')')
	return builder.String()
}

// VideosSlice is a parsable slice of Videos.
type VideosSlice []*Videos
