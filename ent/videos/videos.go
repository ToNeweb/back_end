// Code generated by ent, DO NOT EDIT.

package videos

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the videos type in the database.
	Label = "videos"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDesc holds the string denoting the desc field in the database.
	FieldDesc = "desc"
	// FieldVideoLink holds the string denoting the videolink field in the database.
	FieldVideoLink = "video_link"
	// FieldThumb holds the string denoting the thumb field in the database.
	FieldThumb = "thumb"
	// FieldLikeNum holds the string denoting the likenum field in the database.
	FieldLikeNum = "like_num"
	// FieldCommentNum holds the string denoting the commentnum field in the database.
	FieldCommentNum = "comment_num"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeLikeId holds the string denoting the likeid edge name in mutations.
	EdgeLikeId = "likeId"
	// EdgeCommentId holds the string denoting the commentid edge name in mutations.
	EdgeCommentId = "commentId"
	// Table holds the table name of the videos in the database.
	Table = "videos"
	// UserTable is the table that holds the user relation/edge. The primary key declared below.
	UserTable = "user_sec_videoId"
	// UserInverseTable is the table name for the UserSec entity.
	// It exists in this package in order to avoid circular dependency with the "usersec" package.
	UserInverseTable = "user_secs"
	// LikeIdTable is the table that holds the likeId relation/edge. The primary key declared below.
	LikeIdTable = "videos_likeId"
	// LikeIdInverseTable is the table name for the Likes entity.
	// It exists in this package in order to avoid circular dependency with the "likes" package.
	LikeIdInverseTable = "likes"
	// CommentIdTable is the table that holds the commentId relation/edge. The primary key declared below.
	CommentIdTable = "videos_commentId"
	// CommentIdInverseTable is the table name for the Comments entity.
	// It exists in this package in order to avoid circular dependency with the "comments" package.
	CommentIdInverseTable = "comments"
)

// Columns holds all SQL columns for videos fields.
var Columns = []string{
	FieldID,
	FieldDesc,
	FieldVideoLink,
	FieldThumb,
	FieldLikeNum,
	FieldCommentNum,
}

var (
	// UserPrimaryKey and UserColumn2 are the table columns denoting the
	// primary key for the user relation (M2M).
	UserPrimaryKey = []string{"user_sec_id", "videos_id"}
	// LikeIdPrimaryKey and LikeIdColumn2 are the table columns denoting the
	// primary key for the likeId relation (M2M).
	LikeIdPrimaryKey = []string{"videos_id", "likes_id"}
	// CommentIdPrimaryKey and CommentIdColumn2 are the table columns denoting the
	// primary key for the commentId relation (M2M).
	CommentIdPrimaryKey = []string{"videos_id", "comments_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Videos queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDesc orders the results by the Desc field.
func ByDesc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDesc, opts...).ToFunc()
}

// ByVideoLink orders the results by the videoLink field.
func ByVideoLink(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVideoLink, opts...).ToFunc()
}

// ByThumb orders the results by the thumb field.
func ByThumb(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldThumb, opts...).ToFunc()
}

// ByLikeNum orders the results by the likeNum field.
func ByLikeNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLikeNum, opts...).ToFunc()
}

// ByCommentNum orders the results by the commentNum field.
func ByCommentNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommentNum, opts...).ToFunc()
}

// ByUserCount orders the results by user count.
func ByUserCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserStep(), opts...)
	}
}

// ByUser orders the results by user terms.
func ByUser(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLikeIdCount orders the results by likeId count.
func ByLikeIdCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLikeIdStep(), opts...)
	}
}

// ByLikeId orders the results by likeId terms.
func ByLikeId(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLikeIdStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCommentIdCount orders the results by commentId count.
func ByCommentIdCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCommentIdStep(), opts...)
	}
}

// ByCommentId orders the results by commentId terms.
func ByCommentId(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommentIdStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, UserTable, UserPrimaryKey...),
	)
}
func newLikeIdStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LikeIdInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, LikeIdTable, LikeIdPrimaryKey...),
	)
}
func newCommentIdStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommentIdInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, CommentIdTable, CommentIdPrimaryKey...),
	)
}
