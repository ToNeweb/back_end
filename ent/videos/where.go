// Code generated by ent, DO NOT EDIT.

package videos

import (
	"server04/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Videos {
	return predicate.Videos(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Videos {
	return predicate.Videos(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Videos {
	return predicate.Videos(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Videos {
	return predicate.Videos(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Videos {
	return predicate.Videos(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Videos {
	return predicate.Videos(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Videos {
	return predicate.Videos(sql.FieldLTE(FieldID, id))
}

// Desc applies equality check predicate on the "Desc" field. It's identical to DescEQ.
func Desc(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldDesc, v))
}

// VideoLink applies equality check predicate on the "videoLink" field. It's identical to VideoLinkEQ.
func VideoLink(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldVideoLink, v))
}

// Thumb applies equality check predicate on the "thumb" field. It's identical to ThumbEQ.
func Thumb(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldThumb, v))
}

// LikeNum applies equality check predicate on the "likeNum" field. It's identical to LikeNumEQ.
func LikeNum(v uint64) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldLikeNum, v))
}

// CommentNum applies equality check predicate on the "commentNum" field. It's identical to CommentNumEQ.
func CommentNum(v uint64) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldCommentNum, v))
}

// DescEQ applies the EQ predicate on the "Desc" field.
func DescEQ(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldDesc, v))
}

// DescNEQ applies the NEQ predicate on the "Desc" field.
func DescNEQ(v string) predicate.Videos {
	return predicate.Videos(sql.FieldNEQ(FieldDesc, v))
}

// DescIn applies the In predicate on the "Desc" field.
func DescIn(vs ...string) predicate.Videos {
	return predicate.Videos(sql.FieldIn(FieldDesc, vs...))
}

// DescNotIn applies the NotIn predicate on the "Desc" field.
func DescNotIn(vs ...string) predicate.Videos {
	return predicate.Videos(sql.FieldNotIn(FieldDesc, vs...))
}

// DescGT applies the GT predicate on the "Desc" field.
func DescGT(v string) predicate.Videos {
	return predicate.Videos(sql.FieldGT(FieldDesc, v))
}

// DescGTE applies the GTE predicate on the "Desc" field.
func DescGTE(v string) predicate.Videos {
	return predicate.Videos(sql.FieldGTE(FieldDesc, v))
}

// DescLT applies the LT predicate on the "Desc" field.
func DescLT(v string) predicate.Videos {
	return predicate.Videos(sql.FieldLT(FieldDesc, v))
}

// DescLTE applies the LTE predicate on the "Desc" field.
func DescLTE(v string) predicate.Videos {
	return predicate.Videos(sql.FieldLTE(FieldDesc, v))
}

// DescContains applies the Contains predicate on the "Desc" field.
func DescContains(v string) predicate.Videos {
	return predicate.Videos(sql.FieldContains(FieldDesc, v))
}

// DescHasPrefix applies the HasPrefix predicate on the "Desc" field.
func DescHasPrefix(v string) predicate.Videos {
	return predicate.Videos(sql.FieldHasPrefix(FieldDesc, v))
}

// DescHasSuffix applies the HasSuffix predicate on the "Desc" field.
func DescHasSuffix(v string) predicate.Videos {
	return predicate.Videos(sql.FieldHasSuffix(FieldDesc, v))
}

// DescEqualFold applies the EqualFold predicate on the "Desc" field.
func DescEqualFold(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEqualFold(FieldDesc, v))
}

// DescContainsFold applies the ContainsFold predicate on the "Desc" field.
func DescContainsFold(v string) predicate.Videos {
	return predicate.Videos(sql.FieldContainsFold(FieldDesc, v))
}

// VideoLinkEQ applies the EQ predicate on the "videoLink" field.
func VideoLinkEQ(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldVideoLink, v))
}

// VideoLinkNEQ applies the NEQ predicate on the "videoLink" field.
func VideoLinkNEQ(v string) predicate.Videos {
	return predicate.Videos(sql.FieldNEQ(FieldVideoLink, v))
}

// VideoLinkIn applies the In predicate on the "videoLink" field.
func VideoLinkIn(vs ...string) predicate.Videos {
	return predicate.Videos(sql.FieldIn(FieldVideoLink, vs...))
}

// VideoLinkNotIn applies the NotIn predicate on the "videoLink" field.
func VideoLinkNotIn(vs ...string) predicate.Videos {
	return predicate.Videos(sql.FieldNotIn(FieldVideoLink, vs...))
}

// VideoLinkGT applies the GT predicate on the "videoLink" field.
func VideoLinkGT(v string) predicate.Videos {
	return predicate.Videos(sql.FieldGT(FieldVideoLink, v))
}

// VideoLinkGTE applies the GTE predicate on the "videoLink" field.
func VideoLinkGTE(v string) predicate.Videos {
	return predicate.Videos(sql.FieldGTE(FieldVideoLink, v))
}

// VideoLinkLT applies the LT predicate on the "videoLink" field.
func VideoLinkLT(v string) predicate.Videos {
	return predicate.Videos(sql.FieldLT(FieldVideoLink, v))
}

// VideoLinkLTE applies the LTE predicate on the "videoLink" field.
func VideoLinkLTE(v string) predicate.Videos {
	return predicate.Videos(sql.FieldLTE(FieldVideoLink, v))
}

// VideoLinkContains applies the Contains predicate on the "videoLink" field.
func VideoLinkContains(v string) predicate.Videos {
	return predicate.Videos(sql.FieldContains(FieldVideoLink, v))
}

// VideoLinkHasPrefix applies the HasPrefix predicate on the "videoLink" field.
func VideoLinkHasPrefix(v string) predicate.Videos {
	return predicate.Videos(sql.FieldHasPrefix(FieldVideoLink, v))
}

// VideoLinkHasSuffix applies the HasSuffix predicate on the "videoLink" field.
func VideoLinkHasSuffix(v string) predicate.Videos {
	return predicate.Videos(sql.FieldHasSuffix(FieldVideoLink, v))
}

// VideoLinkEqualFold applies the EqualFold predicate on the "videoLink" field.
func VideoLinkEqualFold(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEqualFold(FieldVideoLink, v))
}

// VideoLinkContainsFold applies the ContainsFold predicate on the "videoLink" field.
func VideoLinkContainsFold(v string) predicate.Videos {
	return predicate.Videos(sql.FieldContainsFold(FieldVideoLink, v))
}

// ThumbEQ applies the EQ predicate on the "thumb" field.
func ThumbEQ(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldThumb, v))
}

// ThumbNEQ applies the NEQ predicate on the "thumb" field.
func ThumbNEQ(v string) predicate.Videos {
	return predicate.Videos(sql.FieldNEQ(FieldThumb, v))
}

// ThumbIn applies the In predicate on the "thumb" field.
func ThumbIn(vs ...string) predicate.Videos {
	return predicate.Videos(sql.FieldIn(FieldThumb, vs...))
}

// ThumbNotIn applies the NotIn predicate on the "thumb" field.
func ThumbNotIn(vs ...string) predicate.Videos {
	return predicate.Videos(sql.FieldNotIn(FieldThumb, vs...))
}

// ThumbGT applies the GT predicate on the "thumb" field.
func ThumbGT(v string) predicate.Videos {
	return predicate.Videos(sql.FieldGT(FieldThumb, v))
}

// ThumbGTE applies the GTE predicate on the "thumb" field.
func ThumbGTE(v string) predicate.Videos {
	return predicate.Videos(sql.FieldGTE(FieldThumb, v))
}

// ThumbLT applies the LT predicate on the "thumb" field.
func ThumbLT(v string) predicate.Videos {
	return predicate.Videos(sql.FieldLT(FieldThumb, v))
}

// ThumbLTE applies the LTE predicate on the "thumb" field.
func ThumbLTE(v string) predicate.Videos {
	return predicate.Videos(sql.FieldLTE(FieldThumb, v))
}

// ThumbContains applies the Contains predicate on the "thumb" field.
func ThumbContains(v string) predicate.Videos {
	return predicate.Videos(sql.FieldContains(FieldThumb, v))
}

// ThumbHasPrefix applies the HasPrefix predicate on the "thumb" field.
func ThumbHasPrefix(v string) predicate.Videos {
	return predicate.Videos(sql.FieldHasPrefix(FieldThumb, v))
}

// ThumbHasSuffix applies the HasSuffix predicate on the "thumb" field.
func ThumbHasSuffix(v string) predicate.Videos {
	return predicate.Videos(sql.FieldHasSuffix(FieldThumb, v))
}

// ThumbEqualFold applies the EqualFold predicate on the "thumb" field.
func ThumbEqualFold(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEqualFold(FieldThumb, v))
}

// ThumbContainsFold applies the ContainsFold predicate on the "thumb" field.
func ThumbContainsFold(v string) predicate.Videos {
	return predicate.Videos(sql.FieldContainsFold(FieldThumb, v))
}

// LikeNumEQ applies the EQ predicate on the "likeNum" field.
func LikeNumEQ(v uint64) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldLikeNum, v))
}

// LikeNumNEQ applies the NEQ predicate on the "likeNum" field.
func LikeNumNEQ(v uint64) predicate.Videos {
	return predicate.Videos(sql.FieldNEQ(FieldLikeNum, v))
}

// LikeNumIn applies the In predicate on the "likeNum" field.
func LikeNumIn(vs ...uint64) predicate.Videos {
	return predicate.Videos(sql.FieldIn(FieldLikeNum, vs...))
}

// LikeNumNotIn applies the NotIn predicate on the "likeNum" field.
func LikeNumNotIn(vs ...uint64) predicate.Videos {
	return predicate.Videos(sql.FieldNotIn(FieldLikeNum, vs...))
}

// LikeNumGT applies the GT predicate on the "likeNum" field.
func LikeNumGT(v uint64) predicate.Videos {
	return predicate.Videos(sql.FieldGT(FieldLikeNum, v))
}

// LikeNumGTE applies the GTE predicate on the "likeNum" field.
func LikeNumGTE(v uint64) predicate.Videos {
	return predicate.Videos(sql.FieldGTE(FieldLikeNum, v))
}

// LikeNumLT applies the LT predicate on the "likeNum" field.
func LikeNumLT(v uint64) predicate.Videos {
	return predicate.Videos(sql.FieldLT(FieldLikeNum, v))
}

// LikeNumLTE applies the LTE predicate on the "likeNum" field.
func LikeNumLTE(v uint64) predicate.Videos {
	return predicate.Videos(sql.FieldLTE(FieldLikeNum, v))
}

// CommentNumEQ applies the EQ predicate on the "commentNum" field.
func CommentNumEQ(v uint64) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldCommentNum, v))
}

// CommentNumNEQ applies the NEQ predicate on the "commentNum" field.
func CommentNumNEQ(v uint64) predicate.Videos {
	return predicate.Videos(sql.FieldNEQ(FieldCommentNum, v))
}

// CommentNumIn applies the In predicate on the "commentNum" field.
func CommentNumIn(vs ...uint64) predicate.Videos {
	return predicate.Videos(sql.FieldIn(FieldCommentNum, vs...))
}

// CommentNumNotIn applies the NotIn predicate on the "commentNum" field.
func CommentNumNotIn(vs ...uint64) predicate.Videos {
	return predicate.Videos(sql.FieldNotIn(FieldCommentNum, vs...))
}

// CommentNumGT applies the GT predicate on the "commentNum" field.
func CommentNumGT(v uint64) predicate.Videos {
	return predicate.Videos(sql.FieldGT(FieldCommentNum, v))
}

// CommentNumGTE applies the GTE predicate on the "commentNum" field.
func CommentNumGTE(v uint64) predicate.Videos {
	return predicate.Videos(sql.FieldGTE(FieldCommentNum, v))
}

// CommentNumLT applies the LT predicate on the "commentNum" field.
func CommentNumLT(v uint64) predicate.Videos {
	return predicate.Videos(sql.FieldLT(FieldCommentNum, v))
}

// CommentNumLTE applies the LTE predicate on the "commentNum" field.
func CommentNumLTE(v uint64) predicate.Videos {
	return predicate.Videos(sql.FieldLTE(FieldCommentNum, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Videos {
	return predicate.Videos(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.UserSec) predicate.Videos {
	return predicate.Videos(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLikeId applies the HasEdge predicate on the "likeId" edge.
func HasLikeId() predicate.Videos {
	return predicate.Videos(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, LikeIdTable, LikeIdPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLikeIdWith applies the HasEdge predicate on the "likeId" edge with a given conditions (other predicates).
func HasLikeIdWith(preds ...predicate.Likes) predicate.Videos {
	return predicate.Videos(func(s *sql.Selector) {
		step := newLikeIdStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCommentId applies the HasEdge predicate on the "commentId" edge.
func HasCommentId() predicate.Videos {
	return predicate.Videos(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, CommentIdTable, CommentIdPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommentIdWith applies the HasEdge predicate on the "commentId" edge with a given conditions (other predicates).
func HasCommentIdWith(preds ...predicate.Comments) predicate.Videos {
	return predicate.Videos(func(s *sql.Selector) {
		step := newCommentIdStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Videos) predicate.Videos {
	return predicate.Videos(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Videos) predicate.Videos {
	return predicate.Videos(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Videos) predicate.Videos {
	return predicate.Videos(sql.NotPredicates(p))
}
