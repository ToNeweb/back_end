// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server04/ent/comments"
	"server04/ent/likes"
	"server04/ent/predicate"
	"server04/ent/usersec"
	"server04/ent/videos"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VideosUpdate is the builder for updating Videos entities.
type VideosUpdate struct {
	config
	hooks    []Hook
	mutation *VideosMutation
}

// Where appends a list predicates to the VideosUpdate builder.
func (vu *VideosUpdate) Where(ps ...predicate.Videos) *VideosUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetDesc sets the "Desc" field.
func (vu *VideosUpdate) SetDesc(s string) *VideosUpdate {
	vu.mutation.SetDesc(s)
	return vu
}

// SetVideoLink sets the "videoLink" field.
func (vu *VideosUpdate) SetVideoLink(s string) *VideosUpdate {
	vu.mutation.SetVideoLink(s)
	return vu
}

// SetThumb sets the "thumb" field.
func (vu *VideosUpdate) SetThumb(s string) *VideosUpdate {
	vu.mutation.SetThumb(s)
	return vu
}

// SetLikeNum sets the "likeNum" field.
func (vu *VideosUpdate) SetLikeNum(u uint64) *VideosUpdate {
	vu.mutation.ResetLikeNum()
	vu.mutation.SetLikeNum(u)
	return vu
}

// AddLikeNum adds u to the "likeNum" field.
func (vu *VideosUpdate) AddLikeNum(u int64) *VideosUpdate {
	vu.mutation.AddLikeNum(u)
	return vu
}

// SetCommentNum sets the "commentNum" field.
func (vu *VideosUpdate) SetCommentNum(u uint64) *VideosUpdate {
	vu.mutation.ResetCommentNum()
	vu.mutation.SetCommentNum(u)
	return vu
}

// AddCommentNum adds u to the "commentNum" field.
func (vu *VideosUpdate) AddCommentNum(u int64) *VideosUpdate {
	vu.mutation.AddCommentNum(u)
	return vu
}

// SetUserID sets the "user" edge to the UserSec entity by ID.
func (vu *VideosUpdate) SetUserID(id int) *VideosUpdate {
	vu.mutation.SetUserID(id)
	return vu
}

// SetNillableUserID sets the "user" edge to the UserSec entity by ID if the given value is not nil.
func (vu *VideosUpdate) SetNillableUserID(id *int) *VideosUpdate {
	if id != nil {
		vu = vu.SetUserID(*id)
	}
	return vu
}

// SetUser sets the "user" edge to the UserSec entity.
func (vu *VideosUpdate) SetUser(u *UserSec) *VideosUpdate {
	return vu.SetUserID(u.ID)
}

// AddLikeIdIDs adds the "likeId" edge to the Likes entity by IDs.
func (vu *VideosUpdate) AddLikeIdIDs(ids ...int) *VideosUpdate {
	vu.mutation.AddLikeIdIDs(ids...)
	return vu
}

// AddLikeId adds the "likeId" edges to the Likes entity.
func (vu *VideosUpdate) AddLikeId(l ...*Likes) *VideosUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return vu.AddLikeIdIDs(ids...)
}

// AddCommentIdIDs adds the "commentId" edge to the Comments entity by IDs.
func (vu *VideosUpdate) AddCommentIdIDs(ids ...int) *VideosUpdate {
	vu.mutation.AddCommentIdIDs(ids...)
	return vu
}

// AddCommentId adds the "commentId" edges to the Comments entity.
func (vu *VideosUpdate) AddCommentId(c ...*Comments) *VideosUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return vu.AddCommentIdIDs(ids...)
}

// Mutation returns the VideosMutation object of the builder.
func (vu *VideosUpdate) Mutation() *VideosMutation {
	return vu.mutation
}

// ClearUser clears the "user" edge to the UserSec entity.
func (vu *VideosUpdate) ClearUser() *VideosUpdate {
	vu.mutation.ClearUser()
	return vu
}

// ClearLikeId clears all "likeId" edges to the Likes entity.
func (vu *VideosUpdate) ClearLikeId() *VideosUpdate {
	vu.mutation.ClearLikeId()
	return vu
}

// RemoveLikeIdIDs removes the "likeId" edge to Likes entities by IDs.
func (vu *VideosUpdate) RemoveLikeIdIDs(ids ...int) *VideosUpdate {
	vu.mutation.RemoveLikeIdIDs(ids...)
	return vu
}

// RemoveLikeId removes "likeId" edges to Likes entities.
func (vu *VideosUpdate) RemoveLikeId(l ...*Likes) *VideosUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return vu.RemoveLikeIdIDs(ids...)
}

// ClearCommentId clears all "commentId" edges to the Comments entity.
func (vu *VideosUpdate) ClearCommentId() *VideosUpdate {
	vu.mutation.ClearCommentId()
	return vu
}

// RemoveCommentIdIDs removes the "commentId" edge to Comments entities by IDs.
func (vu *VideosUpdate) RemoveCommentIdIDs(ids ...int) *VideosUpdate {
	vu.mutation.RemoveCommentIdIDs(ids...)
	return vu
}

// RemoveCommentId removes "commentId" edges to Comments entities.
func (vu *VideosUpdate) RemoveCommentId(c ...*Comments) *VideosUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return vu.RemoveCommentIdIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VideosUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VideosUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VideosUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VideosUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vu *VideosUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(videos.Table, videos.Columns, sqlgraph.NewFieldSpec(videos.FieldID, field.TypeInt))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.Desc(); ok {
		_spec.SetField(videos.FieldDesc, field.TypeString, value)
	}
	if value, ok := vu.mutation.VideoLink(); ok {
		_spec.SetField(videos.FieldVideoLink, field.TypeString, value)
	}
	if value, ok := vu.mutation.Thumb(); ok {
		_spec.SetField(videos.FieldThumb, field.TypeString, value)
	}
	if value, ok := vu.mutation.LikeNum(); ok {
		_spec.SetField(videos.FieldLikeNum, field.TypeUint64, value)
	}
	if value, ok := vu.mutation.AddedLikeNum(); ok {
		_spec.AddField(videos.FieldLikeNum, field.TypeUint64, value)
	}
	if value, ok := vu.mutation.CommentNum(); ok {
		_spec.SetField(videos.FieldCommentNum, field.TypeUint64, value)
	}
	if value, ok := vu.mutation.AddedCommentNum(); ok {
		_spec.AddField(videos.FieldCommentNum, field.TypeUint64, value)
	}
	if vu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videos.UserTable,
			Columns: []string{videos.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersec.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videos.UserTable,
			Columns: []string{videos.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersec.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.LikeIdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   videos.LikeIdTable,
			Columns: videos.LikeIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(likes.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedLikeIdIDs(); len(nodes) > 0 && !vu.mutation.LikeIdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   videos.LikeIdTable,
			Columns: videos.LikeIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(likes.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.LikeIdIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   videos.LikeIdTable,
			Columns: videos.LikeIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(likes.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.CommentIdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   videos.CommentIdTable,
			Columns: videos.CommentIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comments.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedCommentIdIDs(); len(nodes) > 0 && !vu.mutation.CommentIdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   videos.CommentIdTable,
			Columns: videos.CommentIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comments.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.CommentIdIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   videos.CommentIdTable,
			Columns: videos.CommentIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comments.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{videos.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VideosUpdateOne is the builder for updating a single Videos entity.
type VideosUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VideosMutation
}

// SetDesc sets the "Desc" field.
func (vuo *VideosUpdateOne) SetDesc(s string) *VideosUpdateOne {
	vuo.mutation.SetDesc(s)
	return vuo
}

// SetVideoLink sets the "videoLink" field.
func (vuo *VideosUpdateOne) SetVideoLink(s string) *VideosUpdateOne {
	vuo.mutation.SetVideoLink(s)
	return vuo
}

// SetThumb sets the "thumb" field.
func (vuo *VideosUpdateOne) SetThumb(s string) *VideosUpdateOne {
	vuo.mutation.SetThumb(s)
	return vuo
}

// SetLikeNum sets the "likeNum" field.
func (vuo *VideosUpdateOne) SetLikeNum(u uint64) *VideosUpdateOne {
	vuo.mutation.ResetLikeNum()
	vuo.mutation.SetLikeNum(u)
	return vuo
}

// AddLikeNum adds u to the "likeNum" field.
func (vuo *VideosUpdateOne) AddLikeNum(u int64) *VideosUpdateOne {
	vuo.mutation.AddLikeNum(u)
	return vuo
}

// SetCommentNum sets the "commentNum" field.
func (vuo *VideosUpdateOne) SetCommentNum(u uint64) *VideosUpdateOne {
	vuo.mutation.ResetCommentNum()
	vuo.mutation.SetCommentNum(u)
	return vuo
}

// AddCommentNum adds u to the "commentNum" field.
func (vuo *VideosUpdateOne) AddCommentNum(u int64) *VideosUpdateOne {
	vuo.mutation.AddCommentNum(u)
	return vuo
}

// SetUserID sets the "user" edge to the UserSec entity by ID.
func (vuo *VideosUpdateOne) SetUserID(id int) *VideosUpdateOne {
	vuo.mutation.SetUserID(id)
	return vuo
}

// SetNillableUserID sets the "user" edge to the UserSec entity by ID if the given value is not nil.
func (vuo *VideosUpdateOne) SetNillableUserID(id *int) *VideosUpdateOne {
	if id != nil {
		vuo = vuo.SetUserID(*id)
	}
	return vuo
}

// SetUser sets the "user" edge to the UserSec entity.
func (vuo *VideosUpdateOne) SetUser(u *UserSec) *VideosUpdateOne {
	return vuo.SetUserID(u.ID)
}

// AddLikeIdIDs adds the "likeId" edge to the Likes entity by IDs.
func (vuo *VideosUpdateOne) AddLikeIdIDs(ids ...int) *VideosUpdateOne {
	vuo.mutation.AddLikeIdIDs(ids...)
	return vuo
}

// AddLikeId adds the "likeId" edges to the Likes entity.
func (vuo *VideosUpdateOne) AddLikeId(l ...*Likes) *VideosUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return vuo.AddLikeIdIDs(ids...)
}

// AddCommentIdIDs adds the "commentId" edge to the Comments entity by IDs.
func (vuo *VideosUpdateOne) AddCommentIdIDs(ids ...int) *VideosUpdateOne {
	vuo.mutation.AddCommentIdIDs(ids...)
	return vuo
}

// AddCommentId adds the "commentId" edges to the Comments entity.
func (vuo *VideosUpdateOne) AddCommentId(c ...*Comments) *VideosUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return vuo.AddCommentIdIDs(ids...)
}

// Mutation returns the VideosMutation object of the builder.
func (vuo *VideosUpdateOne) Mutation() *VideosMutation {
	return vuo.mutation
}

// ClearUser clears the "user" edge to the UserSec entity.
func (vuo *VideosUpdateOne) ClearUser() *VideosUpdateOne {
	vuo.mutation.ClearUser()
	return vuo
}

// ClearLikeId clears all "likeId" edges to the Likes entity.
func (vuo *VideosUpdateOne) ClearLikeId() *VideosUpdateOne {
	vuo.mutation.ClearLikeId()
	return vuo
}

// RemoveLikeIdIDs removes the "likeId" edge to Likes entities by IDs.
func (vuo *VideosUpdateOne) RemoveLikeIdIDs(ids ...int) *VideosUpdateOne {
	vuo.mutation.RemoveLikeIdIDs(ids...)
	return vuo
}

// RemoveLikeId removes "likeId" edges to Likes entities.
func (vuo *VideosUpdateOne) RemoveLikeId(l ...*Likes) *VideosUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return vuo.RemoveLikeIdIDs(ids...)
}

// ClearCommentId clears all "commentId" edges to the Comments entity.
func (vuo *VideosUpdateOne) ClearCommentId() *VideosUpdateOne {
	vuo.mutation.ClearCommentId()
	return vuo
}

// RemoveCommentIdIDs removes the "commentId" edge to Comments entities by IDs.
func (vuo *VideosUpdateOne) RemoveCommentIdIDs(ids ...int) *VideosUpdateOne {
	vuo.mutation.RemoveCommentIdIDs(ids...)
	return vuo
}

// RemoveCommentId removes "commentId" edges to Comments entities.
func (vuo *VideosUpdateOne) RemoveCommentId(c ...*Comments) *VideosUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return vuo.RemoveCommentIdIDs(ids...)
}

// Where appends a list predicates to the VideosUpdate builder.
func (vuo *VideosUpdateOne) Where(ps ...predicate.Videos) *VideosUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VideosUpdateOne) Select(field string, fields ...string) *VideosUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Videos entity.
func (vuo *VideosUpdateOne) Save(ctx context.Context) (*Videos, error) {
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VideosUpdateOne) SaveX(ctx context.Context) *Videos {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VideosUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VideosUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vuo *VideosUpdateOne) sqlSave(ctx context.Context) (_node *Videos, err error) {
	_spec := sqlgraph.NewUpdateSpec(videos.Table, videos.Columns, sqlgraph.NewFieldSpec(videos.FieldID, field.TypeInt))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Videos.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, videos.FieldID)
		for _, f := range fields {
			if !videos.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != videos.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.Desc(); ok {
		_spec.SetField(videos.FieldDesc, field.TypeString, value)
	}
	if value, ok := vuo.mutation.VideoLink(); ok {
		_spec.SetField(videos.FieldVideoLink, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Thumb(); ok {
		_spec.SetField(videos.FieldThumb, field.TypeString, value)
	}
	if value, ok := vuo.mutation.LikeNum(); ok {
		_spec.SetField(videos.FieldLikeNum, field.TypeUint64, value)
	}
	if value, ok := vuo.mutation.AddedLikeNum(); ok {
		_spec.AddField(videos.FieldLikeNum, field.TypeUint64, value)
	}
	if value, ok := vuo.mutation.CommentNum(); ok {
		_spec.SetField(videos.FieldCommentNum, field.TypeUint64, value)
	}
	if value, ok := vuo.mutation.AddedCommentNum(); ok {
		_spec.AddField(videos.FieldCommentNum, field.TypeUint64, value)
	}
	if vuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videos.UserTable,
			Columns: []string{videos.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersec.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videos.UserTable,
			Columns: []string{videos.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersec.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.LikeIdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   videos.LikeIdTable,
			Columns: videos.LikeIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(likes.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedLikeIdIDs(); len(nodes) > 0 && !vuo.mutation.LikeIdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   videos.LikeIdTable,
			Columns: videos.LikeIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(likes.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.LikeIdIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   videos.LikeIdTable,
			Columns: videos.LikeIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(likes.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.CommentIdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   videos.CommentIdTable,
			Columns: videos.CommentIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comments.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedCommentIdIDs(); len(nodes) > 0 && !vuo.mutation.CommentIdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   videos.CommentIdTable,
			Columns: videos.CommentIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comments.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.CommentIdIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   videos.CommentIdTable,
			Columns: videos.CommentIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comments.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Videos{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{videos.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
